@using esWMS.Client.Components.TableColumnsFilters
@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@using esWMS.Client.ViewModels.Documents
@rendermode InteractiveAuto
@inject IDataService<DocumentItemVM> dataService

<MudTable T="DocumentItemVM"
          ServerData="ServerReload"
          Dense="true"
          Hover="true"
          @ref="table"
          RowClass="cursor-pointer"
          OnRowClick="RowClickEvent">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Pozycje dokumentu</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                       OnClick="OnSearch" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="DocumentItemId" T="DocumentItemVM">
                Id pozycji
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="DocumentItemId" OnChangedAction="OnSearch" />

        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="DocumentId" T="DocumentItemVM">
                Id dokumentu
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="DocumentId" OnChangedAction="OnSearch" />

        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="ProductId" T="DocumentItemVM">
                Id produktu
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="ProductId" OnChangedAction="OnSearch" />

        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="ProductCode" T="DocumentItemVM">
                Kod produktu
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="ProductCode" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="ProductName" T="DocumentItemVM">
                Nazwa produktu
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="ProductName" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Price" T="DocumentItemVM">
                Price
            </MudTableSortLabel>
            <DefaultColumntFilter TypeOfField="DefaultColumntFilter.TypeOfFIlterField.Numeric" SearchOptions="searchOptions" Column="Price" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Quantity" T="DocumentItemVM">
                Ilość
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="Quantity" OnChangedAction="OnSearch" />
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id pozycji">@context.DocumentItemId</MudTd>
        <MudTd DataLabel="Id dokumentu">@context.DocumentId</MudTd>
        <MudTd DataLabel="Id produktu">@context.ProductId</MudTd>
        <MudTd DataLabel="Kod produktu">@context.ProductCode</MudTd>
        <MudTd DataLabel="Nazwa produktu">@context.ProductName</MudTd>
        <MudTd DataLabel="Cena">@context.Price</MudTd>
        <MudTd DataLabel="Ilość">@context.Quantity</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public EventCallback<DocumentItemVM> SelectedDocumentItem { get; set; }

    private IEnumerable<DocumentItemVM> Products = [];
    private IEnumerable<DocumentItemVM> pagedData;
    private MudTable<DocumentItemVM> table;

    private int totalItems;

    private Dictionary<string, FilterOption> searchOptions = new()
    {
        { "DocumentItemId", new("DocumentItemId") },
        { "DocumentId", new("DocumentId") },
        { "ProductId", new("ProductId") },
        { "ProductCode", new("ProductCode") },
        { "ProductName", new("ProductName") },
        { "Price", new("Price", ">") },
        { "Quantity", new("Quantity", ">") }
    };


    private async Task<TableData<DocumentItemVM>> ServerReload(TableState state, CancellationToken token)
    {
        var sm = new SieveModelVM();

        sm.Page = state.Page + 1;
        sm.PageSize = state.PageSize;

        sm.Sorts = string.Concat(state.SortDirection == SortDirection.Descending ? '-' : string.Empty, state.SortLabel ?? string.Empty);

        foreach (var searchOption in searchOptions)
        {
            if (searchOption.Value.Value != string.Empty)
                sm.Filters += searchOption.Value.Column + searchOption.Value.Operator + searchOption.Value.Value + ',';
        }

        var response = await dataService.GetPagedResult(@"api/v1/Zw/get-eligible-items", sm);

        return new TableData<DocumentItemVM>() { TotalItems = response.TotalItems, Items = response.Items };
    }

    private void OnSearch()
    {
        table.ReloadServerData();
    }

    private async Task RowClickEvent(TableRowClickEventArgs<DocumentItemVM> tableRowClickEventArgs)
    {
        await SelectedDocumentItem.InvokeAsync(tableRowClickEventArgs.Item);
    }
}