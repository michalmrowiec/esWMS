@using Newtonsoft.Json
@using esWMS.Client.Components.Document
@using esWMS.Client.PrintTemplates.Models
@using esWMS.Client.Services
@using esWMS.Client.States
@using esWMS.Client.ViewModels
@using esWMS.Client.ViewModels.Documents
@inject IDialogService DialogService
@inject IDataService<RwVM> dataService
@inject IDocumentDataService documentDataService
@inject ISnackbar Snackbar
@inject IAlertService AlertService
@inject IConfirmDialogService ConfirmDialogService
@inject OnePageState OnePageState

<MudGrid Class="mt-2">
    <MudItem style="padding-top: 0px" xs="12">
        <MudCard>
            <MudCardContent>
                <PrintDocumentButton Disabled="@(!RwVM.IsApproved)"
                                     DocumentPrintModel="new DocumentPrintModel(
                        model: RwVM,
                        targetOrSourceName: RwVM.DepartmentName ?? string.Empty,
                        documentType: DocumentTypesName.RW,
                        contractorType: DocumentContractorType.Target)" />
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" lg="12">
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="12" lg="6">
                        <MudTextField ShrinkLabel
                                      @bind-Value="RwVM.DocumentId"
                                      Label="Numer dokumentu"
                                      Variant="Variant.Outlined"
                                      ReadOnly
                                      Margin="Margin.Dense" />
                    </MudItem>
                    <MudItem xs="12" lg="6">
                        <MudTextField ShrinkLabel
                                      Value="@string.Concat($"[{RwVM.IssueWarehouseId}] {RwVM.IssueWarehouse?.WarehouseName}")"
                                      Label="Magazyn wydający"
                                      Variant="Variant.Outlined"
                                      ReadOnly
                                      Margin="Margin.Dense" />
                    </MudItem>
                    <MudItem xs="12" lg="6">
                        <MudTextField ShrinkLabel
                                      @bind-Value="RwVM.AssignedEmployeeId"
                                      Label="Przypisany pracownik"
                                      Variant="Variant.Outlined"
                                      ReadOnly
                                      Margin="Margin.Dense" />
                    </MudItem>
                    <MudItem xs="12" lg="6">
                        <MudTextField ShrinkLabel
                                      Value="@RwVM.DepartmentName"
                                      Label="Odbiorca"
                                      Variant="Variant.Outlined"
                                      ReadOnly
                                      Margin="Margin.Dense" />
                    </MudItem>
                    <MudItem xs="6" lg="3">
                        <MudTextField ShrinkLabel
                                      Value="@RwVM.DocumentIssueDate.ToString("dd-MM-yyyy")"
                                      Label="Data wystawienia"
                                      Variant="Variant.Outlined"
                                      ReadOnly
                                      Margin="Margin.Dense" />
                    </MudItem>
                    <MudItem xs="6" lg="3">
                        <MudTextField ShrinkLabel
                                      Value="@RwVM.GoodsReleaseDate?.ToString("dd-MM-yyyy")"
                                      Label="Wydanie towaru"
                                      Variant="Variant.Outlined"
                                      ReadOnly
                                      Margin="Margin.Dense" />
                    </MudItem>
                    <MudItem xs="6" lg="3">
                        <MudTextField ShrinkLabel
                                      Value="@string.Concat(RwVM.ApprovalDate?.ToString("dd-MM-yyyy"))"
                                      Label="Data zatwierdzenia"
                                      Variant="Variant.Outlined"
                                      ReadOnly
                                      Margin="Margin.Dense" />
                    </MudItem>
                    <MudItem xs="6" lg="3">
                        <MudText Typo="Typo.body1" Class="mb-3">
                            <MudCheckBox @bind-Value="RwVM.IsApproved"
                                         Label="Zatwierdzono"
                                         ReadOnly />
                        </MudText>
                    </MudItem>
                    <MudItem xs="12" lg="12">
                        <MudTextField ShrinkLabel
                                      @bind-Value="RwVM.Comment"
                                      Label="Komentarz"
                                      Variant="Variant.Outlined"
                                      ReadOnly
                                      Margin="Margin.Dense"
                                      Lines="2" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
    <MudItem xs="12" lg="12">
        <MudCard>
            <MudCardContent>
                <DocumentItemsTable DocumentItems="@RwVM.DocumentItems"
                                    TableType="DocumentItemsTable.DocumentItemTableType.DocumentDetails"
                                    OnApprove="OpenDialogAsync"
                                    DeleteFunc="OpenDeleteDialog" />
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>


@if (RwVM.DocumentItems.All(x => x.IsApproved)
&& !RwVM.IsApproved
&& RwVM.DocumentItems.Any())
{
    <MudButton OnClick="@(() => ApproveRw())"
               Size="@Size.Small"
               Variant="@Variant.Filled"
               Color="@Color.Primary"
               Class="mb-3">
        Zatwierdź
    </MudButton>
}
else if (!RwVM.IsApproved && !RwVM.DocumentItems.Any(x => x.IsApproved))
{
    <MudButton OnClick="@(() => OpenDeleteDocumentDialog())"
               EndIcon="@Icons.Material.Outlined.Delete"
               Size="@Size.Small"
               Variant="@Variant.Filled"
               Color="@Color.Error"
               Class="my-3 me-2">
        Usuń
    </MudButton>
}
else
{
    <MudButton Size="@Size.Small"
               Variant="@Variant.Filled"
               Color="@Color.Primary"
               Disabled
               Class="my-3">
        Zatwierdź
    </MudButton>
}

@code {
    [CascadingParameter]
    public bool IsActive { get; set; }
    [Parameter]
    public RwVM RwVM { get; set; } = new();
    [Parameter]
    public List<EventCallback>? EventCallbacks { get; set; }
    [Parameter]
    public Guid TabId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (IsActive)
        {
            await RefreshRw();
        }
    }

    private Task OpenDialogAsync(DocumentItemVM documentItem)
    {
        InvokeAsync(RefreshRw);
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<ApproveIssuedItemDialog>
        {
            { x => x.Uri, @"api/v1/Rw/approve-items" },
            { x => x.DocumentItemVM, documentItem},
            { x => x.FuncsOnAdded, new List<EventCallback>() { EventCallback.Factory.Create(this, RefreshRw) } }
        };
        return DialogService.ShowAsync<ApproveIssuedItemDialog>(null, parameters, options);
    }

    private async Task RefreshRw()
    {
        var sm = new SieveModelVM();

        sm.Page = 1;
        sm.PageSize = 1;
        sm.Filters = $"DocumentId=={RwVM.DocumentId}";

        var response = await dataService.GetPagedResult(@"api/v1/Rw/get-filtered", sm);

        if (response.Items.FirstOrDefault() != null)
        {
            RwVM = response.Items.First();
        }

        StateHasChanged();
    }

    public async Task ApproveRw()
    {
        var response = await documentDataService.ApproveDocument(@"api/v1/Rw/approve", new { DocumentId = RwVM.DocumentId });

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var json = await response.Content.ReadAsStringAsync();
            var responseObj = JsonConvert.DeserializeObject<RwVM>(json);

            await RefreshRw();

            Snackbar.Add(new MarkupString($"Pomyślnie zatwierdzono <b>{RwVM.DocumentId}</b>"), Severity.Success);

        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }

    private async Task OpenDeleteDialog(DocumentItemVM documentItem)
    {
        bool confirm = false;

        await ConfirmDialogService.OpenDeleteDialogAsync(
            "Usuwanie pozycji", "Czy na pewno chcesz usunąć pozycję?",
            Services.Dialog.ConfirmDialogService.ButtonDialogType.Delete,
            EventCallback.Factory.Create(this, () => confirm = true));

        if (confirm)
        {
            await DeleteAsync(documentItem);
        }
    }

    private async Task OpenDeleteDocumentDialog()
    {
        bool confirm = false;

        await ConfirmDialogService.OpenDeleteDialogAsync(
            "Usuwanie pozycji", "Czy na pewno chcesz usunąć dokument?",
            Services.Dialog.ConfirmDialogService.ButtonDialogType.Delete,
            EventCallback.Factory.Create(this, () => confirm = true));

        if (confirm)
        {
            await DeleteDocumentAsync();
        }
    }

    private async Task DeleteAsync(DocumentItemVM documentItem)
    {
        var response = await dataService.Delete(@"api/v1/Rw/item/" + documentItem.DocumentItemId);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add(new MarkupString("Usunięto pozycję"), Severity.Success);
            await RefreshRw();

        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }

    private async Task DeleteDocumentAsync()
    {
        var response = await dataService.Delete(@"api/v1/Rw", new() { { "DocumentId", RwVM.DocumentId } });
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add(new MarkupString("Usunięto dokument"), Severity.Success);
            await OnePageState.RemoveTab(TabId);
        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }
}
