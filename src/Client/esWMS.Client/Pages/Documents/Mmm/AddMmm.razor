@using Newtonsoft.Json
@using esWMS.Client.Pages.Documents
@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@using esWMS.Client.ViewModels.Documents
@using esWMS.Client.ViewModels.WarehouseEnvironment
@using esWMS.Client.ViewModels.WarehouseEnvironment.Warehouse
@inject IDataService<CreateMmmVM> createMmmDataService
@inject IDataService<WarehouseVM> warehouseDataService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IAlertService AlertService

<MudForm Model="@_model"
         @ref="@_form"
         Validation="@(_validator.ValidateValue)"
         ValidationDelay="0" Spacing="4">

    @if (_showInfoAlert)
    {
        <MudAlert Severity="Severity.Info"
                  ContentAlignment="HorizontalAlignment.Left"
                  ShowCloseIcon="true"
                  CloseIconClicked="(() => CloseInfo())">Jednostki piętrowane będą przesunięte w całości, nawet jeśli zostanie wybrana tylko jedna ze stosu.</MudAlert>
    }

    <MudSelect T="string"
               @bind-Value="_model.IssueWarehouseId"
               Label="Magazyn wydający"
               AnchorOrigin="Origin.BottomCenter"
               For="@(() => _model.IssueWarehouseId)"
               Immediate="true"
               Disabled="@(warehouseUnits.Count > 0)">
        @foreach (var warehouse in _warehouses)
        {
            <MudSelectItem Value="@warehouse.WarehouseId">
                [@warehouse.WarehouseId] @warehouse.WarehouseName
            </MudSelectItem>
        }
    </MudSelect>

    <MudSelect T="string"
               @bind-Value="_model.ToWarehouseId"
               Label="Odbiorca"
               AnchorOrigin="Origin.BottomCenter"
               For="@(() => _model.ToWarehouseId)">
        @foreach (var warehouse in _warehouses)
        {
            <MudSelectItem Value="@warehouse.WarehouseId">
                [@warehouse.WarehouseId] @warehouse.WarehouseName
            </MudSelectItem>
        }
    </MudSelect>

    <MudDatePicker Label="Data wystawienia dokumentu"
                   @bind-Date="_model.DocumentIssueDate"
                   For="@(() => _model.DocumentIssueDate)" />

    <MudTextField T="string"
                  @bind-Value="_model.Comment"
                  For="@(() => _model.Comment)"
                  Immediate="true"
                  Label="Uwagi"
                  Lines="3" />

    <esWMS.Client.Components.Employee.EmployeeSelector SelectedEmployee="@((employee) => _model.AssignedEmployeeId = employee.EmployeeId)" />

    <MudDatePicker Label="Data wydania"
                   @bind-Date="_model.GoodsReleaseDate"
                   For="@(() => _model.GoodsReleaseDate)" />

    <MudButton @onclick="OpenDialogAsync"
               Variant="Variant.Filled"
               Color="Color.Primary"
               Disabled="@(_model.IssueWarehouseId == null)">
        Dodaj pozycje
    </MudButton>

    <MudDataGrid T="WarehouseUnitVM"
                 Items="@warehouseUnits"
                 Dense>
        <Columns>
            <PropertyColumn Title="Id jednostki magazynowej" Property="x => x.WarehouseUnitId" />
            <PropertyColumn Title="Id magazynu" Property="x => x.WarehouseId" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate Context="item">
                    <MudStack Row>
                        <MudIconButton Size="@Size.Small"
                                       Icon="@Icons.Material.Outlined.Delete"
                                       OnClick="@(() => { warehouseUnits.Remove(item.Item); StateHasChanged(); })" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>

    <MudButton Variant="Variant.Filled"
               Color="Color.Primary" Class="ml-auto"
               OnClick="@(async () => await Submit())"
               Disabled="@(warehouseUnits.Count == 0 || _model.ToWarehouseId == null)">
        Utwórz
    </MudButton>
</MudForm>

@code {
    [Parameter]
    public List<EventCallback>? EventCallbacks { get; set; }
    public IList<WarehouseUnitVM> warehouseUnits { get; set; } = [];
    private CreateMmmVM _model = new();
    private MudForm _form;
    private CreateMmmVMValidator _validator = new();
    private List<WarehouseVM> _warehouses = new();
    private bool _showInfoAlert = true;

    private void CloseInfo()
    {
        _showInfoAlert = false;
    }

    protected override async Task OnInitializedAsync()
    {
        var warehouseResponse = await warehouseDataService.GetPagedResult(@"api/v1/Warehouse/get-filtered", new SieveModelVM(1, 500, "", ""));
        _warehouses = warehouseResponse.Items.ToList();
    }

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        var parameters = new DialogParameters<AddMmmItemDialog>
        {
            { x => x.WarehouseUnitVMs, EventCallback.Factory.Create<List<WarehouseUnitVM>>(this, OnGet) },
            { x => x.FuncsOnAdded, new List<EventCallback>() { EventCallback.Factory.Create(this, StateHasChanged) } },
            { x => x.WarehouseId, _model.IssueWarehouseId }
        };
        return DialogService.ShowAsync<AddMmmItemDialog>(null, parameters, options);
    }

    private void OnGet(List<WarehouseUnitVM> warehouseUnitVMs)
    {
        warehouseUnits = warehouseUnitVMs;
    }

    private async Task Submit()
    {
        _model.WarehouseUnitIds = warehouseUnits.Select(x => x.WarehouseUnitId).ToList();
        await _form.Validate();

        if (_form.IsValid)
        {
            var response = await createMmmDataService.Create(@"api/v1/Mmm", _model);
            if (response.StatusCode == System.Net.HttpStatusCode.Created)
            {
                _model = new();
                var json = await response.Content.ReadAsStringAsync();
                var responseObj = JsonConvert.DeserializeObject<PzVM>(json);

                Snackbar.Add(new MarkupString($"Utworzono <b>{responseObj?.DocumentId}</b>"), Severity.Success);

                EventCallbacks?.ForEach(async x => await x.InvokeAsync());
            }
            else
            {
                await response.HandleFailure(AlertService);
                StateHasChanged();
            }
        }
    }
}
