@using Newtonsoft.Json
@using esWMS.Client.Components.Document
@using esWMS.Client.PrintTemplates.Models
@using esWMS.Client.Services
@using esWMS.Client.States
@using esWMS.Client.ViewModels
@using esWMS.Client.ViewModels.Documents
@inject IDialogService DialogService
@inject IDataService<PzVM> pzDataService
@inject IDocumentDataService documentDataService
@inject ISnackbar Snackbar
@inject IAlertService AlertService
@inject IConfirmDialogService ConfirmDialogService
@inject OnePageState OnePageState

<PrintDocumentButton Disabled="@(!PzVM.IsApproved)"
                     DocumentPrintModel="new DocumentPrintModel(
                        model: PzVM,
                        contractor: PzVM.SupplierContractor ?? new(),
                        documentType: DocumentTypesName.PZ,
                        contractorType: DocumentContractorType.Supplier)" />

<MudGrid Class="mt-2">
    <MudItem xs="12" lg="12">
        <MudCard>
            <MudGrid>
                <MudItem xs="4">
                    <MudTextField ShrinkLabel
                                  @bind-Value="PzVM.DocumentId"
                                  Label="Numer dokumentu"
                                  Variant="Variant.Outlined"
                                  ReadOnly
                                  Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField ShrinkLabel
                                  Value="@string.Concat($"[{PzVM.IssueWarehouseId}] {PzVM.IssueWarehouse?.WarehouseName}")"
                                  Label="Magazyn wydający"
                                  Variant="Variant.Outlined"
                                  ReadOnly
                                  Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField ShrinkLabel
                                  Value="@string.Concat($"[{PzVM.SupplierContractorId}] {PzVM.SupplierContractor?.ContractorName}")"
                                  Label="Kontrahent"
                                  Variant="Variant.Outlined"
                                  ReadOnly
                                  Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="8">
                    <MudTextField ShrinkLabel
                                  @bind-Value="PzVM.Comment"
                                  Label="Komentarz"
                                  Variant="Variant.Outlined"
                                  ReadOnly
                                  Margin="Margin.Dense"
                                  Lines="3" />
                </MudItem>
                <MudItem xs="4">
                    <MudTextField ShrinkLabel
                                  @bind-Value="PzVM.AssignedEmployeeId"
                                  Label="Przypisany pracownik"
                                  Variant="Variant.Outlined"
                                  ReadOnly
                                  Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField ShrinkLabel
                                  Value="@string.Concat(PzVM.DocumentIssueDate.ToString("dd-MM-yyyy"))"
                                  Label="Data wystawienia dokumentu"
                                  Variant="Variant.Outlined"
                                  ReadOnly
                                  Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="6">
                    <MudTextField ShrinkLabel
                                  Value="@string.Concat(PzVM.GoodsReceiptDate?.ToString("dd-MM-yyyy"))"
                                  Label="Data przyjęcia towaru"
                                  Variant="Variant.Outlined"
                                  ReadOnly
                                  Margin="Margin.Dense" />
                </MudItem>
                <MudItem xs="6">
                    <MudText Typo="Typo.body1" Class="mb-3">
                        <MudCheckBox @bind-Value="PzVM.IsApproved"
                                     Label="Zatwierdzono"
                                     ReadOnly />
                    </MudText>
                </MudItem>
                <MudItem xs="6">
                    <MudTextField ShrinkLabel
                                  Value="@string.Concat(PzVM.ApprovalDate?.ToString("dd-MM-yyyy"))"
                                  Label="Data zatwierdzenia dokumentu"
                                  Variant="Variant.Outlined"
                                  ReadOnly
                                  Margin="Margin.Dense" />
                </MudItem>
            </MudGrid>
        </MudCard>
    </MudItem>
    <MudItem xs="12" lg="12">
        <MudCard>
            <DocumentItemsTable DocumentItems="@PzVM.DocumentItems"
                                TableType="DocumentItemsTable.DocumentItemTableType.DocumentDetails"
                                OnApprove="OpenDialogAsync"
                                DeleteFunc="OpenDeleteDialog"
                                ShowAssignments />
        </MudCard>
    </MudItem>
</MudGrid>

@if (PzVM.DocumentItems.All(x => x.IsApproved)
&& !PzVM.IsApproved
&& PzVM.DocumentItems.Any())
{
    <MudButton OnClick="@(() => ApprovePz())"
               Size="@Size.Small"
               Variant="@Variant.Filled"
               Color="@Color.Primary"
               Class="mb-3">
        Zatwierdź
    </MudButton>
}
else if (!PzVM.IsApproved && !PzVM.DocumentItems.Any(x => x.IsApproved))
{
    <MudButton OnClick="@(() => OpenDeleteDocumentDialog())"
               EndIcon="@Icons.Material.Outlined.Delete"
               Size="@Size.Small"
               Variant="@Variant.Filled"
               Color="@Color.Error"
               Class="my-3 me-2">
        Usuń
    </MudButton>
}
else
{
    <MudButton Size="@Size.Small"
               Variant="@Variant.Filled"
               Color="@Color.Primary"
               Disabled
               Class="my-3">
        Zatwierdź
    </MudButton>
}

@code {
    [CascadingParameter]
    public bool IsActive { get; set; }
    [Parameter]
    public PzVM PzVM { get; set; } = new();
    [Parameter]
    public List<EventCallback>? EventCallbacks { get; set; }
    [Parameter]
    public Guid TabId { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (IsActive)
        {
            await RefreshPz();
        }
    }

    private Task OpenDialogAsync(DocumentItemVM documentItem)
    {
        InvokeAsync(RefreshPz);
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<ApproveReceivedItemDialog>
        {
            { x => x.WarehouseId, PzVM.IssueWarehouseId },
            { x => x.DocumentItemVM, documentItem },
            { x => x.FuncsOnAdded, new List<EventCallback>() { EventCallback.Factory.Create(this, RefreshPz) } },
            { x => x.Uri, @"api/v1/Pz/approve-items"}
        };
        return DialogService.ShowAsync<ApproveReceivedItemDialog>(null, parameters, options);
    }

    private async Task RefreshPz()
    {
        var sm = new SieveModelVM();

        sm.Page = 1;
        sm.PageSize = 1;
        sm.Filters = $"DocumentId=={PzVM.DocumentId}";

        var response = await pzDataService.GetPagedResult(@"api/v1/pz/get-filtered", sm);

        if (response.Items.FirstOrDefault() != null)
        {
            PzVM = response.Items.First();
        }

        StateHasChanged();
    }

    public async Task ApprovePz()
    {
        var response = await documentDataService.ApproveDocument(@"api/v1/Pz/approve", new { DocumentId = PzVM.DocumentId });

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var json = await response.Content.ReadAsStringAsync();
            var responseObj = JsonConvert.DeserializeObject<PzVM>(json);

            await RefreshPz();

            Snackbar.Add(new MarkupString($"Pomyślnie zatwierdzono <b>{PzVM.DocumentId}</b>"), Severity.Success);

        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }

    private async Task OpenDeleteDialog(DocumentItemVM documentItem)
    {
        bool confirm = false;

        await ConfirmDialogService.OpenDeleteDialogAsync(
            "Usuwanie pozycji", "Czy na pewno chcesz usunąć pozycję?",
            Services.Dialog.ConfirmDialogService.ButtonDialogType.Delete,
            EventCallback.Factory.Create(this, () => confirm = true));

        if (confirm)
        {
            await DeleteAsync(documentItem);
        }
    }

    private async Task OpenDeleteDocumentDialog()
    {
        bool confirm = false;

        await ConfirmDialogService.OpenDeleteDialogAsync(
            "Usuwanie pozycji", "Czy na pewno chcesz usunąć dokument?",
            Services.Dialog.ConfirmDialogService.ButtonDialogType.Delete,
            EventCallback.Factory.Create(this, () => confirm = true));

        if (confirm)
        {
            await DeleteDocumentAsync();
        }
    }

    private async Task DeleteAsync(DocumentItemVM documentItem)
    {
        var response = await pzDataService.Delete(@"api/v1/Pz/item/" + documentItem.DocumentItemId);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add(new MarkupString("Usunięto pozycję"), Severity.Success);
            await RefreshPz();

        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }

    private async Task DeleteDocumentAsync()
    {
        var response = await pzDataService.Delete(@"api/v1/Pz", new() { { "DocumentId", PzVM.DocumentId } });
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add(new MarkupString("Usunięto dokument"), Severity.Success);
            await OnePageState.RemoveTab(TabId);
        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }
}
