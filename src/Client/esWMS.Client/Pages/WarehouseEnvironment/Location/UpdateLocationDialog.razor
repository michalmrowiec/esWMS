@using Newtonsoft.Json
@using esWMS.Client.Pages.WarehouseEnvironment.Product
@using esWMS.Client.Services
@using esWMS.Client.ViewModels;
@using esWMS.Client.ViewModels.WarehouseEnvironment
@using esWMS.Client.ViewModels.WarehouseEnvironment.Location
@using esWMS.Client.ViewModels.WarehouseEnvironment.Zone
@inject IDataService<UpdateLocationVM> locationDataService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IAlertService AlertService

<MudDialog>
    <TitleContent>
        Modyfikacja lokalizacji
    </TitleContent>
    <DialogContent>
        <MudForm Model="@_model"
                 @ref="@_form"
                 ValidationDelay="0">
            <MudCardContent>
                <MudGrid Spacing="2">
                    <MudItem xs="12">
                        <MudNumericField @bind-Value="_model.Capacity"
                                         For="@(() => _model.Capacity)"
                                         Immediate="true"
                                         Label="Pojemność"
                                         Min="1"
                                         Required
                                         Max="99999"
                                         Format="F2" />
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField @bind-Value="_model.MaxLength"
                                         For="@(() => _model.MaxLength)"
                                         Label="Maksymalna długość (m)"
                                         Immediate="true"
                                         Min="0"
                                         Max="99999"
                                         Format="F2" />
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField @bind-Value="_model.MaxWidth"
                                         For="@(() => _model.MaxWidth)"
                                         Label="Maksymalna szerokość (m)"
                                         Immediate="true"
                                         Min="0"
                                         Max="99999"
                                         Format="F2" />
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField @bind-Value="_model.MaxHeight"
                                         For="@(() => _model.MaxHeight)"
                                         Label="Maksymalna wysokość (m)"
                                         Immediate="true"
                                         Min="0"
                                         Max="99999"
                                         Format="F2" />
                    </MudItem>

                    <MudItem xs="6">
                        <MudNumericField @bind-Value="_model.MaxWeight"
                                         For="@(() => _model.MaxWeight)"
                                         Label="Maksymalne obciążenie (kg)"
                                         Immediate="true"
                                         Min="0"
                                         Max="99999"
                                         Format="F2" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField Value="@_mediaInfo"
                                      Label="Domyślny nośnik"
                                      Disabled />
                        <MudStack Row="true">
                            <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => {_model.DefaultMediaTypeId = null; _mediaInfo = string.Empty; StateHasChanged();})">
                                Wyczyść
                            </MudIconButton>
                            <MudButton OnClick="OpenDialogAsync">Wybierz nośnik</MudButton>
                        </MudStack>
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Anuluj</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Zaktualizuj</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public List<EventCallback>? FuncsOnUpdated { get; set; } = new();
    [Parameter]
    public LocationVM LocationToUpdate { get; set; }
    public UpdateLocationVM _model;
    private MudForm _form;
    private List<ZoneVM> _zones = new();
    private string _mediaInfo = string.Empty;

    protected override void OnInitialized()
    {
        _model = new()
            {
                LocationId = LocationToUpdate.LocationId,
                Capacity = LocationToUpdate.Capacity,
                DefaultMediaTypeId = LocationToUpdate.DefaultMediaTypeId,
                MaxWidth = LocationToUpdate.MaxWidth,
                MaxHeight = LocationToUpdate.MaxHeight,
                MaxLength = LocationToUpdate.MaxLength,
                MaxWeight = LocationToUpdate.MaxWeight
            };
    }

    private void Cancel() => MudDialog.Cancel();

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                CloseButton = true,
                MaxWidth = MaxWidth.Medium
            };
        var parameters = new DialogParameters<ProductTableDialog>
        {
            { x => x.ShowMediasOnly, true },
            { x => x.SelectedProduct, EventCallback.Factory.Create<ProductVM>(this, (product) => {_model.DefaultMediaTypeId = product.ProductId; _mediaInfo = $"[{product.ProductId}] {product.ProductName}"; }) },
            { x => x.FuncsOnAdded, new List<EventCallback>() { EventCallback.Factory.Create(this, StateHasChanged) } }
        };
        return DialogService.ShowAsync<ProductTableDialog>(null, parameters, options);
    }

    private async Task Submit()
    {
        var response = await locationDataService.Put(@"api/v1/Location", _model);
        if (response.IsSuccessStatusCode)
        {
            var content = await response.Content.ReadAsStringAsync();
            var newLocation = JsonConvert.DeserializeObject<LocationVM>(content) ?? new();

            Snackbar.Add(new MarkupString($"Zaktualizowano <b>{newLocation.LocationId}</b>"), Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
            FuncsOnUpdated?.ForEach(async x => await x.InvokeAsync());
        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }
}
