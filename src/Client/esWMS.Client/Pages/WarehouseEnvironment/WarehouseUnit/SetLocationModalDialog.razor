@using Newtonsoft.Json
@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@using esWMS.Client.ViewModels.WarehouseEnvironment
@using esWMS.Client.ViewModels.WarehouseEnvironment.Location
@inject IDataService<LocationVM> locationService
@inject IDataService<WarehouseUnitVM> warehouseUnitService
@inject ISnackbar Snackbar
@inject IAlertService AlertService

<MudDialog Class="width">
    <TitleContent>
        Przypisanie lokalizacji
    </TitleContent>
    <DialogContent>
        <MudTabs Elevation="1" Rounded="true" PanelClass="pa-6" @ref="_tabs">
            <MudTabPanel Text="Lokalizacja" Icon="@Icons.Material.Filled.LocationOn" ID="@("location")">
                <MudText>Przypisz jednostkę magazynową do lokalizacji - tylko jednoski wolnostojące i podstawy jednostek piętrowanych (automatycznie przypisze lokalizację do piętrowanych).</MudText>
                <MudText>Jeśli lokalizacja nie zostanie wybrana z listy, usunie lokalizację.</MudText>
                <MudTextField T="string"
                              Value="@WarehouseUnit.WarehouseUnitId"
                              Label="Id jednostki magazynowej"
                              Disabled />

                <MudTextField T="string"
                              Value="@(string.IsNullOrEmpty(WarehouseUnit.LocationId) ? "Brak" : WarehouseUnit.LocationId)"
                              Label="Aktualna lokalizacja"
                              Disabled />

                <MudAutocomplete @bind-Value="@_searchString"
                                 SearchFunc="Search"
                                 Variant="Variant.Text"
                                 Label="Nowa lokalizacja"
                                 Dense="false"
                                 Clearable="true" />
            </MudTabPanel>
            <MudTabPanel Text="Piętrowanie" Icon="@Icons.Material.Filled.Layers" ID="@("stacking")">
                <MudText>Piętruj jednoskię na innej. Przypisuje lokalizację wybranej jednoski, na której jest piętrowana.</MudText>
                <MudText>Jeśli jednoska nie zostanie wybrana z listy, usunie piętrowanie.</MudText>
                <MudText>Piętrowane na: @_stackOn?.WarehouseUnitId</MudText>

                <WarehouseUnitTable ExceptWarehouseUnitIdFilter="new() { WarehouseUnit.WarehouseUnitId }"
                                    WarehouseIdFilter="@WarehouseUnit.WarehouseId"
                                    ShowOnlyCanStack
                                    TypeOfSelection="WarehouseUnitTable.SelectionType.Single"
                                    SelectedWarehouseUnits="OnSelected" />
            </MudTabPanel>
            <MudTabPanel Text="Przeniesienie" Icon="@Icons.Material.Filled.LayersClear" ID="@("stackingOff")">
                <MudText>Zdejmi jednoskię (i wszyskie na niej piętrowane) i przypisz nową lokalizację.</MudText>
                <MudTextField T="string"
                              Value="@WarehouseUnit.WarehouseUnitId"
                              Label="Id jednostki magazynowej"
                              Disabled />

                <MudTextField T="string"
                              Value="@(string.IsNullOrEmpty(WarehouseUnit.LocationId) ? "Brak" : WarehouseUnit.LocationId)"
                              Label="Aktualna lokalizacja"
                              Disabled />

                <MudAutocomplete @bind-Value="@_searchString"
                                 SearchFunc="Search"
                                 Variant="Variant.Text"
                                 Label="Nowa lokalizacja"
                                 Dense="false"
                                 Clearable="true" />
            </MudTabPanel>
        </MudTabs>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Anuluj</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Zatwierdź</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public WarehouseUnitVM WarehouseUnit { get; set; }
    [Parameter]
    public List<EventCallback>? FuncsOnSubmit { get; set; } = new();
    private List<string> _locations = new();
    private string _searchString { get; set; } = "";
    private MudTabs _tabs;
    private WarehouseUnitVM? _stackOn;

    private void OnSelected(HashSet<WarehouseUnitVM> warehouseUnits)
    {
        _stackOn = warehouseUnits.FirstOrDefault();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await Search("", CancellationToken.None);
    }

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        string filters = "";

        if (string.IsNullOrWhiteSpace(value) || string.IsNullOrEmpty(WarehouseUnit.WarehouseId))
            filters = $"IsFull==false,LocationId@={WarehouseUnit.WarehouseId!.ToUpper()}";
        else
            filters = $"IsFull==false,LocationId@={WarehouseUnit.WarehouseId!.ToUpper()},{value.ToUpper()}";

        var locationResponse = await locationService.GetPagedResult(@"api/v1/Location/get-filtered", new SieveModelVM(1, 10, filters));
        _locations = locationResponse.Items.Select(x => x.LocationId).ToList();

        if (string.IsNullOrWhiteSpace(value))
            return _locations;

        return _locations.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private async Task Submit()
    {
        HttpResponseMessage response = new();
        switch (_tabs.ActivePanel.ID)
        {
            case "location":
                var requestBodyLocation = new
                {
                    WarehouseUnitId = WarehouseUnit.WarehouseUnitId,
                    LocationId = _searchString
                };

                response = await warehouseUnitService.Patch(@"api/v1/WarehouseUnit/set-location", requestBodyLocation);
                break;
            case "stacking":
                var requestBodyStacking = new
                {
                    WarehouseUnitId = WarehouseUnit.WarehouseUnitId,
                    StackOnWarehouseUnitId = _stackOn?.WarehouseUnitId
                };

                response = await warehouseUnitService.Patch(@"api/v1/WarehouseUnit/set-stack-on", requestBodyStacking);
                break;
            case "stackingOff":
                var requestBodyStackingOff = new
                {
                    WarehouseUnitId = WarehouseUnit.WarehouseUnitId,
                    LocationId = _searchString,
                    RemoveFromStack = true
                };

                response = await warehouseUnitService.Patch(@"api/v1/WarehouseUnit/set-location", requestBodyStackingOff);
                break;
        }

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Snackbar.Add(new MarkupString("Pomyślnie zaktualizowano"), Severity.Success);

            FuncsOnSubmit?.ForEach(async x => await x.InvokeAsync());

            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }

    private void Cancel() => MudDialog.Cancel();
}
