@using Newtonsoft.Json
@using esWMS.Client.Pages.WarehouseEnvironment.WarehouseUnit
@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@using esWMS.Client.ViewModels.Documents
@using esWMS.Client.ViewModels.WarehouseEnvironment
@using static esWMS.Client.Pages.WarehouseEnvironment.WarehouseUnit.WarehouseUnitTable
@inject IDocumentDataService documentService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IDataService<WarehouseUnitVM> warehouseUnitDataService
@inject IDataService<ProductVM> productDataService
@inject IAlertService AlertService

<MudDialog>
    <TitleContent>
        Zatwierdzanie pozycji
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.subtitle1"><strong>Id pozycji dokumentu:</strong> @DocumentItemVM.DocumentItemId</MudText>

        <MudText Typo="Typo.h6">
            Do przypisania: @((DocumentItemVM.Quantity - (DocumentItemVM.DocumentWarehouseUnitItems.Sum(x => x.Quantity) + _documentItemWithAssignments.Sum(x => x.Quantity))).FormatQuantity())
        </MudText>

            <WarehouseUnitTable TypeOfSelection="SelectionType.Single"
                                SelectedWarehouseUnits="OnGet"
                                WarehouseIdFilter="@WarehouseId" />

            <MudNumericField Label="Ilość"
                             @bind-Value="_quantity"
                             Format="@NumericFormat.QuantityStringFormat" />

            @if (_canBeMedia)
        {
            <MudCheckBox @bind-Value="_setMediaOfWarehouseUnit" Label="Ustaw jako nośnik jednoski magazynowej" />
        }

        <MudButton Color="Color.Primary" OnClick="SubmitWarehouseUnit">Dodaj</MudButton>



        <MudDataGrid T="DocumentWarehouseUnitItemVM"
                     Items="@_documentItemWithAssignments"
                     EditMode="DataGridEditMode.Cell"
                     Dense
                     Bordered
                     Hover>
            <ToolBarContent>
                <MudText Typo="Typo.subtitle1">Nowe przypisania</MudText>
                <MudSpacer />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.WarehouseUnitId" />
                <PropertyColumn Property="x => x.Quantity.FormatQuantity()" />
                <TemplateColumn CellClass="d-flex justify-end">
                    <CellTemplate Context="item">
                        <MudStack Row>
                            <MudIconButton Size="@Size.Small"
                                           Icon="@Icons.Material.Outlined.Delete"
                                           OnClick="@(() => { _documentItemWithAssignments.Remove(item.Item); StateHasChanged(); })" />
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
            </Columns>
        </MudDataGrid>

        <MudDataGrid T="DocumentWarehouseUnitItemVM"
                     Items="@DocumentItemVM.DocumentWarehouseUnitItems"
                     EditMode="DataGridEditMode.Cell"
                     Filterable="false"
                     SortMode="SortMode.None"
                     Dense
                     Bordered
                     Hover>
            <ToolBarContent>
                <MudText Typo="Typo.subtitle1">Przypisane</MudText>
                <MudSpacer />
            </ToolBarContent>
            <Columns>
                <PropertyColumn Property="x => x.WarehouseUnitItemId" Title="Id pozycji magazynowej" />
                <TemplateColumn CellClass="d-flex justify-end" Title="Id jednostki magazynowej">
                    <CellTemplate Context="item">
                        <MudStack Row>
                            <MudText>@_warehouseUnitVMs.FirstOrDefault(x => x.WarehouseUnitItems.Any(x => x.WarehouseUnitItemId.Equals(item.Item.WarehouseUnitItemId)))?.WarehouseUnitId</MudText>
                        </MudStack>
                    </CellTemplate>
                </TemplateColumn>
                <PropertyColumn Property="x => x.Quantity.FormatQuantity()" />
            </Columns>
        </MudDataGrid>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Anuluj</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Zatwierdź</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public List<EventCallback>? FuncsOnAdded { get; set; } = new();
    [Parameter]
    public DocumentItemVM DocumentItemVM { get; set; }
    [Parameter]
    public string? WarehouseId { get; set; }
    [Parameter]
    public string Uri { get; set; }
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private string? _selectedWarehouseUnitId = "";
    private List<DocumentWarehouseUnitItemVM> _documentItemWithAssignments = new();
    private List<WarehouseUnitVM> _warehouseUnitVMs = new();
    private WarehouseUnitVM? _selected;
    private bool _canBeMedia = false;
    private bool _setMediaOfWarehouseUnit = false;
    private decimal _quantity = 0;

    protected override void OnParametersSet()
    {
        _quantity = DocumentItemVM.Quantity - (DocumentItemVM.DocumentWarehouseUnitItems.Sum(x => x.Quantity) + _documentItemWithAssignments.Sum(x => x.Quantity));
    }

    private void OnGet(HashSet<WarehouseUnitVM> warehouseUnits)
    {
        _selected = warehouseUnits.FirstOrDefault();
        StateHasChanged();
    }

    private void SubmitWarehouseUnit()
    {
        if (_selected != null && _quantity > 0)
        {
            _documentItemWithAssignments.Add(new(DocumentItemVM.DocumentItemId, _selected?.WarehouseUnitId, _quantity, isMedia: _setMediaOfWarehouseUnit));
            _setMediaOfWarehouseUnit = false;
            _quantity = DocumentItemVM.Quantity - (DocumentItemVM.DocumentWarehouseUnitItems.Sum(x => x.Quantity) + _documentItemWithAssignments.Sum(x => x.Quantity));
            StateHasChanged();
        }
    }

    private async Task Submit()
    {
        if (_selectedWarehouseUnitId != null)
        {
            var requestBody = new
            {
                DocumentId = DocumentItemVM.DocumentId,
                DocumentItemsWithAssignment = _documentItemWithAssignments
            };

            var response = await documentService.ApproveDocument(Uri, requestBody);
            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                var json = await response.Content.ReadAsStringAsync();
                var responseObj = JsonConvert.DeserializeObject<PwVM>(json);

                Snackbar.Add(new MarkupString("Pomyślnie zatwierdzono"), Severity.Success);

                FuncsOnAdded?.ForEach(async x => await x.InvokeAsync());

                MudDialog.Close(DialogResult.Ok(true));
            }
            else
            {
                await response.HandleFailure(AlertService);
            }
        }
    }

    private void Cancel() => MudDialog.Cancel();

    protected override async Task OnInitializedAsync()
    {
        var sm = new SieveModelVM();

        sm.Page = 1;
        sm.PageSize = 100;

        var warehouseUnitItemIds = string.Join("|", DocumentItemVM.DocumentWarehouseUnitItems.Select(x => x.WarehouseUnitItemId));

        sm.Filters = $"FilterByWarehouseUnitItemIds=={warehouseUnitItemIds}";

        var response = await warehouseUnitDataService.GetPagedResult(@"api/v1/WarehouseUnit/get-filtered", sm);

        _warehouseUnitVMs = response.Items.ToList();

        var productResponse = await productDataService.GetPagedResult(@"api/v1/Product/get-filtered", new SieveModelVM { Page = 1, PageSize = 1, Filters = $"ProductId=={DocumentItemVM.ProductId},IsMedia==true" });
        if (productResponse.Items.Count == 1)
        {
            _canBeMedia = true;
        }

        StateHasChanged();
    }
}