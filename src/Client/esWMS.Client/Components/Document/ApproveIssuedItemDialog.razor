@using Newtonsoft.Json
@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@using esWMS.Client.ViewModels.Documents
@inject IDocumentDataService documentService
@inject ISnackbar Snackbar
@inject IAlertService AlertService

<MudDialog>
    <TitleContent>
        Zatwierdzanie pozycji
    </TitleContent>
    <DialogContent>
        <MudText Typo="Typo.subtitle1"><strong>Id pozycji dokumentu:</strong> @DocumentItemVM.DocumentItemId</MudText>

        <MudText Typo="Typo.h6">Czy na pewno chcesz zatwierdzić pozycję?</MudText>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Anuluj</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Zatwierdź</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public List<EventCallback>? FuncsOnAdded { get; set; } = new();
    [Parameter]
    public DocumentItemVM DocumentItemVM { get; set; }
    [Parameter]
    public string Uri { get; set; }
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private async Task Submit()
    {
        var requestBody = new
        {
            DocumentId = DocumentItemVM.DocumentId,
            DocumentItemsWithAssignment = DocumentItemVM.DocumentWarehouseUnitItems
        };

        var response = await documentService.ApproveDocument(Uri, requestBody);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var json = await response.Content.ReadAsStringAsync();
            var responseObj = JsonConvert.DeserializeObject<PzVM>(json);

            Snackbar.Add(new MarkupString("Pomyślnie zatwierdzono"), Severity.Success);

            FuncsOnAdded?.ForEach(async x => await x.InvokeAsync());

            MudDialog.Close(DialogResult.Ok(true));
        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }

    private void Cancel() => MudDialog.Cancel();
}