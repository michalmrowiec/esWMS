// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using esWMS.Infrastructure;

#nullable disable

namespace esWMS.Infrastructure.Migrations
{
    [DbContext(typeof(EsWmsDbContext))]
    [Migration("20240909110351_ChangedProductColumns")]
    partial class ChangedProductColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.BaseDocument", b =>
                {
                    b.Property<string>("DocumentId")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("ApprovingEmployeeId")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("AprovedDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("AssignedEmployeeId")
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime>("DocumentIssueDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("varchar(13)");

                    b.Property<bool>("IsApproved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("IssueWarehouseId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("IssuingEmployeeId")
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.HasKey("DocumentId");

                    b.HasIndex("ApprovingEmployeeId");

                    b.HasIndex("AssignedEmployeeId");

                    b.HasIndex("DocumentIssueDate")
                        .HasDatabaseName("IX_Documents_DocumentIssueDate");

                    b.HasIndex("IssueWarehouseId");

                    b.HasIndex("IssuingEmployeeId");

                    b.ToTable("Documents");

                    b.HasDiscriminator<string>("DocumentType").HasValue("BaseDocument");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.DocumentItem", b =>
                {
                    b.Property<string>("DocumentItemId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BatchLot")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("BestBefore")
                        .HasColumnType("datetime(6)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Currency")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("DocumentId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("EanCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Unit")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("VatRate")
                        .HasColumnType("int");

                    b.HasKey("DocumentItemId");

                    b.HasIndex("DocumentId");

                    b.HasIndex("ProductId");

                    b.ToTable("DocumentItems");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.DocumentWarehouseUnitItem", b =>
                {
                    b.Property<string>("DocumentItemId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("WarehouseUnitItemId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("longtext");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasColumnType("longtext");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("DocumentItemId", "WarehouseUnitItemId");

                    b.HasIndex("WarehouseUnitItemId");

                    b.ToTable("DocumentWarehouseUnitItems");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.SystemActors.Contractor", b =>
                {
                    b.Property<string>("ContractorId")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ContractorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsRecipient")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsSupplier")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("VatId")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("ContractorId");

                    b.ToTable("Contractors");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.SystemActors.Employee", b =>
                {
                    b.Property<string>("EmployeeId")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("PasswordHash")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.Category", b =>
                {
                    b.Property<string>("CategoryId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("ParentCategoryId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.Location", b =>
                {
                    b.Property<string>("LocationId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<decimal>("Capacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(65,30)")
                        .HasDefaultValue(1m);

                    b.Property<int>("Cell")
                        .HasColumnType("int");

                    b.Property<string>("Column")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("DefaultMediaTypeId")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<decimal?>("MaxHeight")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("MaxLength")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("MaxWeight")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("MaxWidth")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<int>("Row")
                        .HasColumnType("int");

                    b.Property<string>("ZoneId")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.HasKey("LocationId");

                    b.HasIndex("DefaultMediaTypeId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.Product", b =>
                {
                    b.Property<string>("ProductId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Currency")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<string>("EanCode")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsMedia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<bool>("IsWeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<decimal?>("MaxStorageTemperature")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal?>("MinStorageTemperature")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("ProductDescription")
                        .HasColumnType("longtext");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("ShortProductName")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("varchar(35)");

                    b.Property<string>("SupplierContractorId")
                        .HasColumnType("varchar(3)");

                    b.Property<decimal?>("TotalHeight")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TotalLength")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TotalWeight")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TotalWidth")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("Unit")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("VatRate")
                        .HasColumnType("int");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierContractorId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.Warehouse", b =>
                {
                    b.Property<string>("WarehouseId")
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("Address")
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Country")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("PostalCode")
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.Property<string>("Region")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("WarehouseName")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)");

                    b.HasKey("WarehouseId");

                    b.ToTable("Warehouses");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.WarehouseUnit", b =>
                {
                    b.Property<string>("WarehouseUnitId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<bool?>("CanBeStacked")
                        .HasColumnType("tinyint(1)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<bool>("IsBlocked")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasDefaultValue(false);

                    b.Property<string>("LocationId")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("MediaId")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("StackOnId")
                        .HasColumnType("varchar(50)");

                    b.Property<decimal?>("TotalHeight")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TotalLength")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TotalWeight")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<decimal?>("TotalWidth")
                        .HasColumnType("decimal(18, 4)");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.HasKey("WarehouseUnitId");

                    b.HasIndex("LocationId");

                    b.HasIndex("MediaId");

                    b.HasIndex("StackOnId")
                        .IsUnique();

                    b.HasIndex("WarehouseId");

                    b.ToTable("WarehouseUnits");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.WarehouseUnitItem", b =>
                {
                    b.Property<string>("WarehouseUnitItemId")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("BatchLot")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("BestBefore")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("BlockedQuantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("Currency")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("SerialNumber")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Unit")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.Property<int?>("VatRate")
                        .HasColumnType("int");

                    b.Property<string>("WarehouseUnitId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("WarehouseUnitItemId");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseUnitId");

                    b.ToTable("WarehouseUnitItems");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.Zone", b =>
                {
                    b.Property<string>("ZoneId")
                        .HasMaxLength(5)
                        .HasColumnType("varchar(5)");

                    b.Property<decimal?>("AvgTemperature")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<DateTime?>("ModifiedAt")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ModifiedBy")
                        .HasMaxLength(60)
                        .HasColumnType("varchar(60)");

                    b.Property<string>("WarehouseId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<string>("ZoneAlias")
                        .IsRequired()
                        .HasMaxLength(1)
                        .HasColumnType("varchar(1)");

                    b.Property<string>("ZoneName")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("ZoneId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.MMM", b =>
                {
                    b.HasBaseType("esWMS.Domain.Entities.Documents.BaseDocument");

                    b.Property<DateTime?>("GoodsReleaseDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("GoodsReleaseDate");

                    b.Property<string>("ToWarehouseId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.HasIndex("ToWarehouseId");

                    b.HasDiscriminator().HasValue("MMM");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.MMP", b =>
                {
                    b.HasBaseType("esWMS.Domain.Entities.Documents.BaseDocument");

                    b.Property<string>("FromWarehouseId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.Property<DateTime?>("GoodsReceiptDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("GoodsReceiptDate");

                    b.Property<string>("RelatedMmmId")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("varchar(25)");

                    b.HasIndex("FromWarehouseId");

                    b.HasIndex("RelatedMmmId")
                        .IsUnique();

                    b.HasDiscriminator().HasValue("MMP");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.PW", b =>
                {
                    b.HasBaseType("esWMS.Domain.Entities.Documents.BaseDocument");

                    b.Property<string>("DepartmentName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("DepartmentName");

                    b.Property<DateTime?>("GoodsReceiptDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("GoodsReceiptDate");

                    b.HasDiscriminator().HasValue("PW");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.PZ", b =>
                {
                    b.HasBaseType("esWMS.Domain.Entities.Documents.BaseDocument");

                    b.Property<DateTime?>("GoodsReceiptDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("GoodsReceiptDate");

                    b.Property<string>("SupplierContractorId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.HasIndex("SupplierContractorId");

                    b.HasDiscriminator().HasValue("PZ");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.RW", b =>
                {
                    b.HasBaseType("esWMS.Domain.Entities.Documents.BaseDocument");

                    b.Property<string>("DepartmentName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("DepartmentName");

                    b.Property<DateTime?>("GoodsReleaseDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("GoodsReleaseDate");

                    b.HasDiscriminator().HasValue("RW");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.WZ", b =>
                {
                    b.HasBaseType("esWMS.Domain.Entities.Documents.BaseDocument");

                    b.Property<DateTime?>("GoodsReleaseDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("GoodsReleaseDate");

                    b.Property<string>("RecipientContractorId")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("varchar(3)");

                    b.HasIndex("RecipientContractorId");

                    b.HasDiscriminator().HasValue("WZ");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.ZW", b =>
                {
                    b.HasBaseType("esWMS.Domain.Entities.Documents.BaseDocument");

                    b.Property<string>("DepartmentName")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasMaxLength(250)
                        .HasColumnType("varchar(250)")
                        .HasColumnName("DepartmentName");

                    b.Property<DateTime?>("GoodsReceiptDate")
                        .ValueGeneratedOnUpdateSometimes()
                        .HasColumnType("datetime(6)")
                        .HasColumnName("GoodsReceiptDate");

                    b.HasDiscriminator().HasValue("ZW");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.BaseDocument", b =>
                {
                    b.HasOne("esWMS.Domain.Entities.SystemActors.Employee", "ApprovingEmployee")
                        .WithMany()
                        .HasForeignKey("ApprovingEmployeeId");

                    b.HasOne("esWMS.Domain.Entities.SystemActors.Employee", "AssignedEmployee")
                        .WithMany()
                        .HasForeignKey("AssignedEmployeeId");

                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.Warehouse", "IssueWarehouse")
                        .WithMany("Documents")
                        .HasForeignKey("IssueWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("esWMS.Domain.Entities.SystemActors.Employee", "IssuingEmployee")
                        .WithMany()
                        .HasForeignKey("IssuingEmployeeId");

                    b.Navigation("ApprovingEmployee");

                    b.Navigation("AssignedEmployee");

                    b.Navigation("IssueWarehouse");

                    b.Navigation("IssuingEmployee");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.DocumentItem", b =>
                {
                    b.HasOne("esWMS.Domain.Entities.Documents.BaseDocument", "Document")
                        .WithMany("DocumentItems")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.Product", "Product")
                        .WithMany("DocumentItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Document");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.DocumentWarehouseUnitItem", b =>
                {
                    b.HasOne("esWMS.Domain.Entities.Documents.DocumentItem", "DocumentItem")
                        .WithMany("DocumentWarehouseUnitItems")
                        .HasForeignKey("DocumentItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.WarehouseUnitItem", "WarehouseUnitItem")
                        .WithMany("DocumentWarehouseUnitItems")
                        .HasForeignKey("WarehouseUnitItemId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("DocumentItem");

                    b.Navigation("WarehouseUnitItem");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.Category", b =>
                {
                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.Category", "ParentCategory")
                        .WithMany("ChildCategories")
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.Location", b =>
                {
                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.Product", "DefaultMediaType")
                        .WithMany("LocationDefaultMedia")
                        .HasForeignKey("DefaultMediaTypeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.Zone", "Zone")
                        .WithMany("Locations")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DefaultMediaType");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.Product", b =>
                {
                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("esWMS.Domain.Entities.SystemActors.Contractor", "SupplierContractor")
                        .WithMany("Products")
                        .HasForeignKey("SupplierContractorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");

                    b.Navigation("SupplierContractor");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.WarehouseUnit", b =>
                {
                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.Location", "Location")
                        .WithMany("WarehouseUnits")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.Product", "Media")
                        .WithMany()
                        .HasForeignKey("MediaId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.WarehouseUnit", "StackOn")
                        .WithOne()
                        .HasForeignKey("esWMS.Domain.Entities.WarehouseEnviroment.WarehouseUnit", "StackOnId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.Warehouse", "Warehouse")
                        .WithMany("WarehouseUnits")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Media");

                    b.Navigation("StackOn");

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.WarehouseUnitItem", b =>
                {
                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.Product", "Product")
                        .WithMany("WarehouseUnitItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.WarehouseUnit", "WarehouseUnit")
                        .WithMany("WarehouseUnitItems")
                        .HasForeignKey("WarehouseUnitId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("WarehouseUnit");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.Zone", b =>
                {
                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.Warehouse", "Warehouse")
                        .WithMany("Zones")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Warehouse");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.MMM", b =>
                {
                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.Warehouse", "ToWarehouse")
                        .WithMany("MMMDocuments")
                        .HasForeignKey("ToWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ToWarehouse");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.MMP", b =>
                {
                    b.HasOne("esWMS.Domain.Entities.WarehouseEnviroment.Warehouse", "FromWarehouse")
                        .WithMany("MMPDocuments")
                        .HasForeignKey("FromWarehouseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("esWMS.Domain.Entities.Documents.MMM", "RelatedMmm")
                        .WithOne("RelatedMmp")
                        .HasForeignKey("esWMS.Domain.Entities.Documents.MMP", "RelatedMmmId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("FromWarehouse");

                    b.Navigation("RelatedMmm");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.PZ", b =>
                {
                    b.HasOne("esWMS.Domain.Entities.SystemActors.Contractor", "SupplierContractor")
                        .WithMany("PZDocuments")
                        .HasForeignKey("SupplierContractorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SupplierContractor");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.WZ", b =>
                {
                    b.HasOne("esWMS.Domain.Entities.SystemActors.Contractor", "RecipientContractor")
                        .WithMany("WZDocuments")
                        .HasForeignKey("RecipientContractorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RecipientContractor");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.BaseDocument", b =>
                {
                    b.Navigation("DocumentItems");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.DocumentItem", b =>
                {
                    b.Navigation("DocumentWarehouseUnitItems");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.SystemActors.Contractor", b =>
                {
                    b.Navigation("PZDocuments");

                    b.Navigation("Products");

                    b.Navigation("WZDocuments");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.Category", b =>
                {
                    b.Navigation("ChildCategories");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.Location", b =>
                {
                    b.Navigation("WarehouseUnits");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.Product", b =>
                {
                    b.Navigation("DocumentItems");

                    b.Navigation("LocationDefaultMedia");

                    b.Navigation("WarehouseUnitItems");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.Warehouse", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("MMMDocuments");

                    b.Navigation("MMPDocuments");

                    b.Navigation("WarehouseUnits");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.WarehouseUnit", b =>
                {
                    b.Navigation("WarehouseUnitItems");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.WarehouseUnitItem", b =>
                {
                    b.Navigation("DocumentWarehouseUnitItems");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.WarehouseEnviroment.Zone", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("esWMS.Domain.Entities.Documents.MMM", b =>
                {
                    b.Navigation("RelatedMmp");
                });
#pragma warning restore 612, 618
        }
    }
}
