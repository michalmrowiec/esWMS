@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@inject IDataService<LocationVM> locationService

<MudAutocomplete @bind-Value="@searchString"
                 SearchFunc="Search"
                 Variant="Variant.Text"
                 Label="Lokalizacja"
                 Disabled="@Disabled"
                 Dense="false"
                 Clearable="false"
                 TextChanged="OnChange"/>

@if (responseErrors.Any())
{
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({responseErrors.Count})")</MudText>
            @foreach (var error in responseErrors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
}

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    [Parameter]
    public bool Disabled { get; set; }
    [Parameter]
    public string LocationIdFilter { get; set; } = string.Empty;
    [Parameter]
    public EventCallback<string> SearchString { get; set; }
    public string searchString { get; set; } = "";

    private List<string> locations = new();
    private List<string> responseErrors = new();

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        var locationResponse = await locationService.GetPagedResult(@"api/v1/Location/get-filtered", new SieveModelVM(1, 10, GetFilters()));
        locations = locationResponse.Items.Select(x => x.LocationId).ToList();

        if (string.IsNullOrWhiteSpace(value))
            return locations;

        return locations.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }

    private string GetFilters()
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return $"LocationId@={LocationIdFilter.ToUpper()}";

        return $"LocationId@={LocationIdFilter.ToUpper()},{searchString.ToUpper()}";
    }

    private async Task OnChange(string value)
    {
        await SearchString.InvokeAsync(value);
    }
}
