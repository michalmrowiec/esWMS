@using esWMS.Client.Pages.Warehouse
@using esWMS.Client.Pages.Warehouse.WarehouseUnitItem
@using esWMS.Client.ViewModels
@using esWMS.Client.ViewModels.Documents
@inject IDialogService DialogService

<MudDialog>
    <TitleContent>
        Dodawanie pozycji
    </TitleContent>
    <DialogContent>

        <MudStack Spacing="2">
            <MudGrid>
                <MudItem xs="9">
                    <MudTextField @bind-Value="_productInfo"
                                  Label="Wybrany artykuł"
                                  ReadOnly />
                </MudItem>
                <MudItem xs="3">
                    <MudButton OnClick="@(() => _warehouseStockExpanded = !_warehouseStockExpanded)"
                               Disabled="@(_warehouseUnitItems.Count != 0)"
                               StartIcon="@(_warehouseStockExpanded ? Icons.Material.Outlined.SearchOff : Icons.Material.Outlined.Search)">
                        @(_warehouseStockExpanded ? "Zamknij" : "Szukaj")
                    </MudButton>
                </MudItem>
            </MudGrid>

            <MudDivider />
            <MudCollapse Expanded="_warehouseStockExpanded">
                <WarehouseStockTable SelectedStock="OnStockProductSelected" WarehouseId="@WarehouseId" />
            </MudCollapse>
        </MudStack>

        <MudNumericField Label="Cena"
                         @bind-Value="_price" />

        <MudSelect T="string"
                   @bind-Value="_currency"
                   Label="Waluta"
                   AnchorOrigin="Origin.BottomCenter"
                   Immediate="true">

            <MudSelectItem Value="@(new string("PLN"))">
                PLN
            </MudSelectItem>

        </MudSelect>

        <MudTable Items="@_warehouseUnitItems"
                  Hover
                  Dense
                  RowEditPreview="BackupItem"
                  RowEditCancel="ResetItemToOriginalValues">
            <HeaderContent>
                <MudTh>Id pozycji</MudTh>
                <MudTh>Id jednostki</MudTh>
                <MudTh>Ilość</MudTh>
                <MudTh>Cena</MudTh>
                <MudTd></MudTd>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Id pozycji">@context.WarehouseUnitItemId</MudTd>
                <MudTd DataLabel="Id jednostki">@context.WarehouseUnitId</MudTd>
                <MudTd DataLabel="Ilość">@context.Quantity</MudTd>
                <MudTd DataLabel="Cena">@context.Price</MudTd>
                <MudTd>
                    <MudIconButton Size="@Size.Small"
                                   Icon="@Icons.Material.Outlined.Delete"
                                   OnClick="@(() => { _warehouseUnitItems.Remove(context);  StateHasChanged(); })" />
                </MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="Kod produktu">@context.WarehouseUnitItemId</MudTd>
                <MudTd DataLabel="Nazwa produktu">@context.WarehouseUnitId</MudTd>
                <MudTd DataLabel="Ilość">
                    <MudNumericField @bind-Value="context.Quantity" Required />
                </MudTd>
                <MudTd DataLabel="Cena">@context.Price</MudTd>
            </RowEditingTemplate>
            <FooterContent>
                <MudTFootRow>
                    <MudTd Style="text-align:right">Suma:</MudTd>
                    <MudTd Style="text-align:left">@_warehouseUnitItems.Sum(x => x.Quantity)</MudTd>
                </MudTFootRow>
                <MudTFootRow>
                    <MudTd Style="text-align:right">Wartość:</MudTd>
                    <MudTd Style="text-align:left">@_warehouseUnitItems.Sum(x => x.Quantity * x.Price)</MudTd>
                </MudTFootRow>
                <MudTFootRow>
                    <MudTd Style="text-align:right">Średnia cena:</MudTd>
                    <MudTd Style="text-align:left">@CalcWeightedAverage().ToString("0.00")</MudTd>
                </MudTFootRow>
            </FooterContent>
        </MudTable>

        <MudButton @onclick="OpenDialogAsync"
                   Variant="Variant.Filled"
                   Color="Color.Primary">
            Dodaj pozycję
        </MudButton>

    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Anuluj</MudButton>
        <MudButton Color="Color.Primary" OnClick="Submit">Dodaj</MudButton>
    </DialogActions>
</MudDialog>
@code {
    [Parameter]
    public List<EventCallback>? FuncsOnAdded { get; set; } = new();
    [Parameter]
    public List<DocumentItemVM> DocumentItemVMs { get; set; }
    [Parameter]
    public string? WarehouseId { get; set; }
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }

    private MudDataGrid<WarehouseUnitItemVM> _mudDataGrid;
    private WarehouseStockVM? _selectedStockProduct;
    private decimal _price = 0;
    private string _currency = "PLN";
    private string _productInfo = "";
    private HashSet<DocumentWarehouseUnitItemVM> _documentItemWithAssignments = new();
    private HashSet<WarehouseUnitItemVM> _warehouseUnitItems = new();
    private WarehouseUnitItemVM _elementBeforeEdit;
    private bool _warehouseStockExpanded = true;

    private void Submit()
    {
        if (_selectedStockProduct != null)
        {
            DocumentItemVMs.Add(new DocumentItemVM()
                {
                    ProductId = _selectedStockProduct.ProductId,
                    ProductCode = "",
                    EanCode = "",
                    ProductName = _selectedStockProduct.ProductName,
                    Quantity = _warehouseUnitItems.Sum(x => x.Quantity),
                    Price = _price,
                    Currency = _currency,
                    DocumentWarehouseUnitItems = _warehouseUnitItems.Select(x =>
                        new DocumentWarehouseUnitItemVM(
                            "",
                            x.WarehouseUnitId,
                            x.Quantity,
                            x.WarehouseUnitItemId)).ToList()
                });
        }

        FuncsOnAdded?.ForEach(async x => await x.InvokeAsync());

        MudDialog.Close(DialogResult.Ok(true));
    }

    private void Cancel() => MudDialog.Cancel();

    private void OnStockProductSelected(WarehouseStockVM stockProduct)
    {
        if (_warehouseUnitItems.Count != 0)
            return;

        _selectedStockProduct = stockProduct;
        _productInfo = $"{stockProduct.ProductName}";
        _warehouseStockExpanded = false;
        StateHasChanged();
    }

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        var parameters = new DialogParameters<WarehouseUnitItemTableDialog>
        {
            { x => x.WarehouseUnitItem, EventCallback.Factory.Create<(WarehouseUnitItemVM, int)>(this, OnGet) },
            { x => x.FuncsOnAdded, new List<EventCallback>() { EventCallback.Factory.Create(this, StateHasChanged) } },
            { x => x.ProductIdFilter, _selectedStockProduct?.ProductId ?? "" },
            { x => x.WarehouseIdFilter, WarehouseId ?? "" },
            { x => x.ExceptWarehouseUnitItem, _warehouseUnitItems?.Select(x => x.WarehouseUnitItemId)?.ToHashSet() ?? null }
        };
        return DialogService.ShowAsync<WarehouseUnitItemTableDialog>(null, parameters, options);
    }

    private void OnGet((WarehouseUnitItemVM warehouseUnitItem, int quantity) item)
    {
        _warehouseUnitItems.Add(item.warehouseUnitItem);
        _warehouseUnitItems.First(x => x.WarehouseUnitItemId.Equals(item.warehouseUnitItem.WarehouseUnitItemId)).Quantity = item.quantity;

        if (_price == 0)
            _price = item.warehouseUnitItem.Price ?? 0;

        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        _elementBeforeEdit = new()
            {
                Quantity = ((WarehouseUnitItemVM)element).Quantity,
            };
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((WarehouseUnitItemVM)element).Quantity = _elementBeforeEdit.Quantity;
    }

    private decimal CalcWeightedAverage()
    {
        if (_warehouseUnitItems.Count == 0)
            return 0;

        var sum = _warehouseUnitItems.Sum(x => x.Quantity * x.Price) ?? 0;
        var quantity = _warehouseUnitItems.Sum(x => x.Quantity);

        if (sum == 0 || quantity == 0)
            return 0;

        return sum / quantity;
    }
}