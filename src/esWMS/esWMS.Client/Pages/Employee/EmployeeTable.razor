@page "/employee"
@using esWMS.Client.Components.TableColumnsFilters
@using esWMS.Client.Pages.OnePage
@using esWMS.Client.Services
@using esWMS.Client.States
@using esWMS.Client.ViewModels
@using esWMS.Client.ViewModels.SystemActors
@inject OnePageState OnePageState
@rendermode InteractiveAuto
@inject IDataService<EmployeeVM> ContractorService
@inject IDialogService DialogService

<MudTable T="EmployeeVM"
          ServerData="ServerReload"
          Dense="true"
          Hover="true"
          @ref="table"
          RowClass="cursor-pointer">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Pracownicy</MudText>
        <MudSpacer />
        <AuthorizeView Roles="ADM">
            <Authorized>
                <MudButton Variant="Variant.Filled"
                           Color="Color.Primary"
                           Class="ml-auto"
                           OnClick="@(async () => await OnePageState.AddTab(new TabView("Tworzenie pracownika", new CreateEmployee(), Guid.NewGuid(), Icons.Material.Filled.PersonAddAlt1)))">
                    Utwórz pracownika
                </MudButton>
            </Authorized>
        </AuthorizeView>
        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                       OnClick="OnSearch" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="EmployeeId" T="EmployeeVM">
                Id
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="EmployeeId" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="RoleId" T="EmployeeVM">
                Rola
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="RoleId" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="FirstName" T="EmployeeVM">
                Imię
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="FirstName" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="LastName" T="EmployeeVM">
                Nazwisko
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="LastName" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="EmailAddress" T="EmployeeVM">
                Email
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="EmailAddress" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="PhoneNumber" T="EmployeeVM">
                Telefon
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="PhoneNumber" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Country" T="EmployeeVM">
                Kraj
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="Country" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="City" T="EmployeeVM">
                Miasto
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="City" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Region" T="EmployeeVM">
                Region
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="Region" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="PostalCode" T="EmployeeVM">
                Kod Pocztowy
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="PostalCode" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Address" T="EmployeeVM">
                Adres
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="Address" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="IsActive" T="EmployeeVM">
                Aktywny
            </MudTableSortLabel>
            <BoolColumnTableFilter SearchOptions="searchOptions" Column="IsActive" OnChangedAction="OnSearch" />
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.EmployeeId</MudTd>
        <MudTd DataLabel="Rola">@context.RoleId</MudTd>
        <MudTd DataLabel="Imię">@context.FirstName</MudTd>
        <MudTd DataLabel="Nazwisko">@context.LastName</MudTd>
        <MudTd DataLabel="Email">@context.EmailAddress</MudTd>
        <MudTd DataLabel="Telefon">@context.PhoneNumber</MudTd>
        <MudTd DataLabel="Kraj">@context.Country</MudTd>
        <MudTd DataLabel="Miasto">@context.City</MudTd>
        <MudTd DataLabel="Region">@context.Region</MudTd>
        <MudTd DataLabel="Kod Pocztowy">@context.PostalCode</MudTd>
        <MudTd DataLabel="Adres">@context.Address</MudTd>
        <MudTd DataLabel="Aktywny">
            <MudCheckBox @bind-Value="@context.IsActive"
                         Size="Size.Small"
                         ReadOnly />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <TableNoRecordsContent />
    </NoRecordsContent>
    <LoadingContent>
        <TableLoadingContent />
    </LoadingContent>
    <PagerContent>
        <TablePager PageSize="@PageSize" />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public int[]? PageSize { get; set; }

    private IEnumerable<EmployeeVM> pagedData;
    private MudTable<EmployeeVM> table;

    private int totalItems;

    private Dictionary<string, FilterOption> searchOptions = new()
    {
        { "EmployeeId", new("EmployeeId") },
        { "RoleId", new("RoleId") },
        { "FirstName", new("FirstName") },
        { "LastName", new("LastName") },
        { "EmailAddress", new("EmailAddress") },
        { "PhoneNumber", new("PhoneNumber") },
        { "Country", new("Country") },
        { "City", new("City") },
        { "Region", new("Region") },
        { "PostalCode", new("PostalCode") },
        { "Address", new("Address") },
        { "IsActive", new("IsActive", "==", string.Empty) }
    };

    private async Task<TableData<EmployeeVM>> ServerReload(TableState state, CancellationToken token)
    {
        var sm = new SieveModelVM();

        sm.Page = state.Page + 1;
        sm.PageSize = state.PageSize;

        sm.Sorts = string.Concat(state.SortDirection == SortDirection.Descending ? '-' : string.Empty, state.SortLabel ?? string.Empty);

        foreach (var searchOption in searchOptions)
        {
            if (searchOption.Value.Value != string.Empty)
                sm.Filters += searchOption.Value.Column + searchOption.Value.Operator + searchOption.Value.Value + ',';
        }

        var response = await ContractorService.GetPagedResult(@"api/v1/Employee/get-filtered", sm);

        return new TableData<EmployeeVM>() { TotalItems = response.TotalItems, Items = response.Items };
    }

    private void OnSearch()
    {
        table.ReloadServerData();
    }
}