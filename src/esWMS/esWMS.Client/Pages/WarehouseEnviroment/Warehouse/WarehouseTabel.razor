@page "/warehouses"
@using esWMS.Client.Components.TableColumnsFilters
@using esWMS.Client.Pages.OnePage
@using esWMS.Client.Services
@using esWMS.Client.States
@using esWMS.Client.ViewModels
@rendermode InteractiveAuto
@inject IDataService<WarehouseVM> dataService
@inject OnePageState OnePageState

<MudTable T="WarehouseVM"
          ServerData="ServerReload"
          Dense="true"
          Hover="true"
          @ref="table"
          RowClass="cursor-pointer"
          OnRowClick="RowClickEvent">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Magazyny</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                       OnClick="OnSearch" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="WarehouseId" T="WarehouseVM">
                Id
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="WarehouseId" OnChangedAction="OnSearch" />

        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="WarehouseName" T="WarehouseVM">
                Nazwa
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="WarehouseName" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Country" T="WarehouseVM">
                Kraj
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="Country" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="City" T="WarehouseVM">
                Miasto
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="City" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Address" T="WarehouseVM">
                Adres
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="Address" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Region" T="WarehouseVM">
                Region
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="Region" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="PostalCode" T="WarehouseVM">
                Kod Pocztowy
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="PostalCode" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="IsActive" T="WarehouseVM">
                Aktywny
            </MudTableSortLabel>
            <BoolColumnTableFilter SearchOptions="searchOptions" Column="IsActive" OnChangedAction="OnSearch" />
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.WarehouseId</MudTd>
        <MudTd DataLabel="Nazwa">@context.WarehouseName</MudTd>
        <MudTd DataLabel="Kraj">@context.Country</MudTd>
        <MudTd DataLabel="Miasto">@context.City</MudTd>
        <MudTd DataLabel="Adres">@context.Address</MudTd>
        <MudTd DataLabel="Region">@context.Region</MudTd>
        <MudTd DataLabel="Kod Pocztowy">@context.PostalCode</MudTd>
        <MudTd DataLabel="Aktywny">
            <MudCheckBox @bind-Value="@context.IsActive"
                         Size="Size.Small"
                         ReadOnly />
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <TableNoRecordsContent />
    </NoRecordsContent>
    <LoadingContent>
        <TableLoadingContent />
    </LoadingContent>
    <PagerContent>
        <TablePager />
    </PagerContent>
</MudTable>

@code {
    private IEnumerable<WarehouseVM> Products = [];
    private IEnumerable<WarehouseVM> pagedData;
    private MudTable<WarehouseVM> table;

    private int totalItems;

    private Dictionary<string, FilterOption> searchOptions = new()
    {
        { "WarehouseId", new("WarehouseId") },
        { "WarehouseName", new("WarehouseName") },
        { "Country", new("Country") },
        { "City", new("City") },
        { "Address", new("Address") },
        { "Region", new("Region") },
        { "PostalCode", new("PostalCode") },
        { "IsActive", new("IsActive", "==", "true") }
    };

    private async Task<TableData<WarehouseVM>> ServerReload(TableState state, CancellationToken token)
    {
        var sm = new SieveModelVM();

        sm.Page = state.Page + 1;
        sm.PageSize = state.PageSize;

        sm.Sorts = string.Concat(state.SortDirection == SortDirection.Descending ? '-' : string.Empty, state.SortLabel ?? string.Empty);

        foreach (var searchOption in searchOptions)
        {
            if (searchOption.Value.Value != string.Empty)
                sm.Filters += searchOption.Value.Column + searchOption.Value.Operator + searchOption.Value.Value + ',';
        }

        var response = await dataService.GetPagedResult(@"api/v1/Warehouse/get-filtered", sm);

        return new TableData<WarehouseVM>() { TotalItems = response.TotalItems, Items = response.Items };
    }

    private async Task RowClickEvent(TableRowClickEventArgs<WarehouseVM> tableRowClickEventArgs)
    {
        var tabid = Guid.NewGuid();
        await OnePageState.AddTab(
            new TabView("Szczegóły magazynu" ?? " ",
            new WarehouseDetails(),
            tabid,
            Icons.Material.Filled.Info,
            new() { { "WarehouseId", tableRowClickEventArgs.Item.WarehouseId }, { "TabId", tabid } }));
    }

    private void OnSearch()
    {
        table.ReloadServerData();
    }
}