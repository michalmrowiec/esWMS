@using Newtonsoft.Json
@using esWMS.Client.Services
@using esWMS.Client.ViewModels;
@using esWMS.Client.ViewModels.WarehouseEnviroment.Location
@using static esWMS.Client.Pages.WarehouseEnviroment.WarehouseUnit.WarehouseUnitTable
@inject IDataService<WarehouseUnitItemVM> WarehouseUnitItemService
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@inject IAlertService AlertService

<MudDialog>
    <TitleContent>
        Przenieś/Podziel
    </TitleContent>
    <DialogContent>
        <MudTable Items="WarehouseUnitItemsToMove"
                  Context="WuiContext"
                  Hover="true"
                  Breakpoint="Breakpoint.Sm"
                  Elevation="0"
                  Dense
                  Bordered
                  RowEditPreview="BackupItem"
                  RowEditCancel="ResetItemToOriginalValues">
            <HeaderContent>
                <MudTh>Kod produktu</MudTh>
                <MudTh>Nazwa produktu</MudTh>
                <MudTh>Ilość</MudTh>
                <MudTh>Nośnik</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Kod produktu">@WuiContext.Product.ProductCode</MudTd>
                <MudTd DataLabel="Nazwa produktu">@WuiContext.Product.ProductName</MudTd>
                <MudTd DataLabel="Ilość">@WuiContext.Quantity</MudTd>
                <MudTd DataLabel="Nośnik">
                    <MudCheckBox @bind-Value="@WuiContext.IsMediaOfWarehouseUnit"
                                 Size="Size.Small"
                                 Disabled />
                </MudTd>
            </RowTemplate>
            <RowEditingTemplate>
                <MudTd DataLabel="Kod produktu">@WuiContext.Product.ProductCode</MudTd>
                <MudTd DataLabel="Nazwa produktu">@WuiContext.Product.ProductName</MudTd>
                <MudTd DataLabel="Ilość">
                    <MudNumericField @bind-Value="WuiContext.Quantity" Required />
                </MudTd>
                <MudTd DataLabel="Nośnik">
                    <MudCheckBox @bind-Value="@WuiContext.IsMediaOfWarehouseUnit"
                                 Size="Size.Small"
                                 Disabled />
                </MudTd>
            </RowEditingTemplate>
        </MudTable>

        <WarehouseUnitTable TypeOfSelection="SelectionType.Single"
                            SelectedWarehouseUnits="OnGet"
                            WarehouseIdFilter="@WarehouseId" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Anuluj</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Przenieś/Podziel</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [Parameter]
    public List<WarehouseUnitItemVM> WarehouseUnitItemsToMove { get; set; } = [];
    [Parameter]
    public string WarehouseId { get; set; }
    [Parameter]
    public List<EventCallback>? FuncsOnCreated { get; set; } = new();
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private MudForm _form;
    private CreateLocationVM _model = new();
    private CreateLocationVMValidator _validator = new();
    private WarehouseUnitItemVM _elementBeforeEdit;
    private WarehouseUnitVM _newWarehouseUnit;

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        var model = new
        {
            WarehouseUnitItemWithQuantity = WarehouseUnitItemsToMove.Select(x => new
            {
                WarehouseUnitItemId = x.WarehouseUnitItemId,
                Quantity = x.Quantity
            }).ToList(),
            NewWarehouseUnitId = _newWarehouseUnit.WarehouseUnitId
        };

        var response = await WarehouseUnitItemService.CreateObject(@"api/v1/WarehouseUnitItem/move-items", model);
        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Snackbar.Add(new MarkupString($"Przeniesiono pozycje magazynowe"), Severity.Success);
            MudDialog.Close(DialogResult.Ok(true));
            FuncsOnCreated?.ForEach(async x => await x.InvokeAsync());
        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }

    private void OnGet(HashSet<WarehouseUnitVM> warehouseUnits)
    {
        _newWarehouseUnit = warehouseUnits.FirstOrDefault();
        StateHasChanged();
    }

    private void BackupItem(object element)
    {
        _elementBeforeEdit = new()
            {
                Quantity = ((WarehouseUnitItemVM)element).Quantity,
            };
    }

    private void ResetItemToOriginalValues(object element)
    {
        ((WarehouseUnitItemVM)element).Quantity = _elementBeforeEdit.Quantity;
    }
}
