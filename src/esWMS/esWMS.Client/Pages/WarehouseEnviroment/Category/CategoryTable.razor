@page "/categories"
@using esWMS.Client.Components
@using esWMS.Client.Components.DeleteDialog
@using esWMS.Client.Components.TableColumnsFilters
@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@rendermode InteractiveAuto
@inject IDataService<CategoryVM> dataService
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IAlertService AlertService

<style>
    .mud-table-cell-custom-group {
        font-weight: 500;
    }

    .mud-table-cell-custom-group-footer {
        padding-bottom: 50px;
        text-align: right;
    }
</style>

<MudTable T="CategoryVM"
          ServerData="ServerReload"
          Dense="true"
          Hover="true"
          @ref="table"
          GroupBy="@_groupDefinition"
          GroupHeaderStyle="background-color:var(--mud-palette-background-gray)"
          GroupFooterClass="mb-4"
          Height="500px"
          FixedHeader="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6" Class="me-3">Kategorie</MudText>
        <ExpandCollapseGroupsButtons ExpandAction="table.ExpandAllGroups"
                                     CollapseAction="table.CollapseAllGroups" />
        <MudSpacer />
        <AuthorizeView Roles="ADM, MNG">
            <Authorized>
                <MudButton @onclick="OpenDialogAsync"
                           Variant="Variant.Filled"
                           Color="Color.Primary">
                    Utwórz kategorię
                </MudButton>
            </Authorized>
        </AuthorizeView>

    </ToolBarContent>
    <ColGroup>
        <col style="width: 60px;" />
        <col />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="CategoryName" T="CategoryVM">
                Nazwa
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="CategoryName" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="ParentCategoryName" T="CategoryVM">
                Nadkategoria Nazwa
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="ParentCategoryName" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="CategoryId" T="CategoryVM">
                Id
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="CategoryId" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="ParentCategoryId" T="CategoryVM">
                Id Nadkategoria
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="ParentCategoryId" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Category Name">@context.CategoryName</MudTd>
        <MudTd DataLabel="Parent Category Name">@context.ParentCategory?.CategoryName</MudTd>
        <MudTd DataLabel="Nr">@context.CategoryId</MudTd>
        <MudTd DataLabel="Parent Category">@context.ParentCategoryId</MudTd>
        <AuthorizeView Roles="ADM, MNG" Context="context2">
            <Authorized>
                <MudTh>
                    <MudIconButton Size="@Size.Small"
                                   Icon="@Icons.Material.Outlined.Edit"
                                   OnClick="@(async () => await OpenEditDialogAsync(context))" />
                </MudTh>
                <MudTh>
                    <MudIconButton Size="@Size.Small"
                                   Icon="@Icons.Material.Outlined.Delete"
                                   OnClick="@(async () => await OpenDeleteDialogAsync(context))" />
                </MudTh>
            </Authorized>
        </AuthorizeView>
    </RowTemplate>
    <GroupHeaderTemplate>
        <MudTh Class="mud-table-cell-custom-group" colspan="3">@($"{context.GroupName}: {context.Key}")</MudTh>
    </GroupHeaderTemplate>
    <NoRecordsContent>
        <TableNoRecordsContent />
    </NoRecordsContent>
    <LoadingContent>
        <TableLoadingContent />
    </LoadingContent>
    <PagerContent>
        <TablePager />
    </PagerContent>
</MudTable>

@code {
    private MudTable<CategoryVM> table;

    private TableGroupDefinition<CategoryVM> _groupDefinition = new()
        {
            GroupName = "Kategoria Nadrzędna",
            Indentation = false,
            Expandable = true,
            IsInitiallyExpanded = false,
            Selector = (category) => category.ParentCategory?.CategoryName ?? "Brak"
        };

    private Dictionary<string, FilterOption> searchOptions = new()
    {
        { "CategoryName", new("CategoryName") },
        { "ParentCategoryName", new("ParentCategoryName") },
        { "CategoryId", new("CategoryId") },
        { "DocumentIssueDateEnd", new("DateFilter") },
        { "ParentCategoryId", new("ParentCategoryId") }
    };
    private async Task<TableData<CategoryVM>> ServerReload(TableState state, CancellationToken token)
    {
        var sm = new SieveModelVM();

        sm.Page = state.Page + 1;
        sm.PageSize = state.PageSize;

        sm.Sorts = string.Concat(state.SortDirection == SortDirection.Descending ? '-' : string.Empty, state.SortLabel ?? string.Empty);

        foreach (var searchOption in searchOptions)
        {
            if (searchOption.Value.Value != string.Empty)
                sm.Filters += searchOption.Value.Column + searchOption.Value.Operator + searchOption.Value.Value + ',';
        }

        var response = await dataService.GetPagedResult(@"api/v1/Category/get-filtered", sm);

        return new TableData<CategoryVM>() { TotalItems = response.TotalItems, Items = response.Items };
    }

    private void OnSearch()
    {
        table.ReloadServerData();
    }

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                CloseButton = true
            };
        var parameters = new DialogParameters<AddCategoryDialog>
        {
            { x => x.FuncsOnCreated, new List<EventCallback>() { EventCallback.Factory.Create(this, table.ReloadServerData) } },
        };
        return DialogService.ShowAsync<AddCategoryDialog>(null, parameters, options);
    }

    private Task OpenEditDialogAsync(CategoryVM category)
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                CloseButton = true
            };
        var parameters = new DialogParameters<AddCategoryDialog>
        {
            { x => x.FuncsOnCreated, new List<EventCallback>() { EventCallback.Factory.Create(this, table.ReloadServerData) } },
            { x => x.DialogType, AddCategoryDialog.TypeOfCategoryDialog.Update },
            { x => x.CategoryToUpdate, category }
        };
        return DialogService.ShowAsync<AddCategoryDialog>(null, parameters, options);
    }

    private async Task OpenDeleteDialogAsync(CategoryVM category)
    {
        var parameters = new DialogParameters<DeleteConfirmDialog>
        {
            { x => x.ContentText, $"Czy na pewno chcesz trwale usunąć kategorię: {category.CategoryName}"}
        };

        var options = new DialogOptions() { CloseButton = true, MaxWidth = MaxWidth.ExtraSmall };

        var dialog = await DialogService.ShowAsync<DeleteConfirmDialog>("Delete", parameters, options);
        var result = await dialog.Result;

        if (!result?.Canceled ?? false)
        {
            await DeleteAsync(category);
        }
    }

    private async Task DeleteAsync(CategoryVM category)
    {
        var response = await dataService.Delete(@"api/v1/Category/" + category.CategoryId);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add(new MarkupString("Usunięto kategorię"), Severity.Success);
            await table.ReloadServerData();
        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }
}
