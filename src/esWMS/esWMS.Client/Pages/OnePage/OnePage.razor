@page "/"
@inject OnePageState OnePageState

<PageTitle>esWMS</PageTitle>

<MudDynamicTabs KeepPanelsAlive="true" @ref="@DynamicTabs" @bind-ActivePanelIndex="@OnePageState.UserIndex"
                CloseTab="@CloseTabCallback"
                CloseIconToolTip="Close tab. All data will be lost"
                PanelClass="px-4 py-6" Elevation="4" Rounded ApplyEffectsToContainer>
    @foreach (var tab in OnePageState.UserTabs)
    {
        <MudTabPanel ID="@tab.Id" Text="@tab.Label" Icon="@tab.Icon" ShowCloseIcon="true">
            @GetRenderFragment(tab.Content.GetType(), tab.ComponentParameters)
        </MudTabPanel>

    }
</MudDynamicTabs>

@code {
    public MudDynamicTabs DynamicTabs;

    RenderFragment GetRenderFragment(Type type, Dictionary<string, object> parameters = null)
    {
        RenderFragment renderFragment = renderTreeBuilder =>
        {
            renderTreeBuilder.OpenComponent(0, type);

            if (parameters != null)
            {
                int parNumber = 1;
                foreach (var param in parameters)
                {
                    renderTreeBuilder.AddAttribute(parNumber, param.Key, param.Value);
                    parNumber++;
                }
            }

            renderTreeBuilder.CloseComponent();
        };
        return renderFragment;
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();

        OnePageState.OnAddTab += async () => await InvokeAsync(StateHasChanged);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (OnePageState.StateHasChanged)
        {
            OnePageState.StateHasChanged = false;
            StateHasChanged();
        }
    }

    void CloseTabCallback(MudTabPanel panel) => OnePageState.RemoveTab((Guid)panel.ID);
}
