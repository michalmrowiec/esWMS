@using Newtonsoft.Json
@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@inject IDataService<CreateProductVM> productService
@inject IDataService<CategoryVM> categoryService
@inject IDataService<ContractorVM> contractorService
@inject ISnackbar Snackbar
@inject IAlertService AlertService

<MudDialog>
    <TitleContent>
        Nowy produkt
    </TitleContent>
    <DialogContent>
        <MudForm Model="@_model"
                 @ref="@_form"
                 Validation="@(_validator.ValidateValue)"
                 ValidationDelay="0">
            <MudCardContent>
                <MudTextField @bind-Value="_model.ProductCode"
                              For="@(() => _model.ProductCode)"
                              Immediate="true"
                              Label="Kod produktu"
                              MaxLength="100" />

                <MudTextField @bind-Value="_model.EanCode"
                              For="@(() => _model.EanCode)"
                              Immediate="true"
                              Label="Kod EAN"
                              MaxLength="100" />

                <MudTextField @bind-Value="_model.ProductName"
                              For="@(() => _model.ProductName)"
                              Immediate="true"
                              Label="Nazwa produktu"
                              MaxLength="250" />

                <MudTextField @bind-Value="_model.ShortProductName"
                              For="@(() => _model.ShortProductName)"
                              Immediate="true"
                              Label="Skrócona nazwa"
                              MaxLength="35" />

                <MudTextField @bind-Value="_model.ProductDescription"
                              For="@(() => _model.ProductDescription)"
                              Immediate="true"
                              Label="Opis produktu" />

                <MudSelect T="string"
                           @bind-Value="_model.CategoryId"
                           Label="Kategoria"
                           AnchorOrigin="Origin.BottomCenter"
                           For="@(() => _model.CategoryId)"
                           Immediate="true">
                    @foreach (var category in _categories)
                    {
                        <MudSelectItem Value="@category.CategoryId">
                            @category.CategoryName
                        </MudSelectItem>
                    }
                </MudSelect>

                <MudAutocomplete @bind-Value="_model.Unit"
                                 SearchFunc="@(async (value, ct) => await Search(value, ct))"
                                 Variant="Variant.Text"
                                 Label="Jednostka"
                                 CoerceValue="true" />

                <MudCheckBox @bind-Value="_model.IsWeight" Label="Artykuł wagowy" />

                <MudNumericField @bind-Value="_model.TotalWeight"
                                 For="@(() => _model.TotalWeight)"
                                 Immediate="true"
                                 Label="Waga na jednostkę (kg)" />

                <MudNumericField @bind-Value="_model.TotalHeight"
                                 For="@(() => _model.TotalHeight)"
                                 Immediate="true"
                                 Label="Wysokość (m)" />

                <MudNumericField @bind-Value="_model.TotalWidth"
                                 For="@(() => _model.TotalWidth)"
                                 Immediate="true"
                                 Label="Szerokość (m)" />

                <MudTextField @bind-Value="_model.TotalLength"
                              For="@(() => _model.TotalLength)"
                              Immediate="true"
                              Label="Długość (m)" />

                <MudNumericField @bind-Value="_model.MinStorageTemperature"
                                 For="@(() => _model.MinStorageTemperature)"
                                 Immediate="true"
                                 Label="Minimalna temperatura przechowywania (°C)" />

                <MudNumericField @bind-Value="_model.MaxStorageTemperature"
                                 For="@(() => _model.MaxStorageTemperature)"
                                 Immediate="true"
                                 Label="Maksymalna temperatura przechowywania (°C)" />

                <MudCheckBox @bind-Value="_model.IsMedia" Label="Artykuł jest nośnikiem" />

                <MudNumericField @bind-Value="_model.Price"
                                 For="@(() => _model.Price)"
                                 Immediate="true"
                                 Label="Cena" />

                <MudSelect T="string"
                           @bind-Value="_model.SupplierContractorId"
                           For="@(() => _model.SupplierContractorId)"
                           Immediate="true"
                           Label="Identyfikator dostawcy">
                    @foreach (var contractor in _contractors)
                    {
                        <MudSelectItem Value="@contractor.ContractorId">
                            [@contractor.ContractorId] @contractor.ContractorName
                        </MudSelectItem>
                    }
                </MudSelect>

                <MudCheckBox @bind-Value="_model.IsActive" Label="Aktywny" />
            </MudCardContent>
        </MudForm>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Anuluj</MudButton>
        <MudButton Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto" OnClick="@(async () => await Submit())">Utwórz</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter]
    private MudDialogInstance MudDialog { get; set; }
    private MudForm _form;
    private CreateProductVM _model = new();
    private CreateProductVMValidator _validator = new();
    private List<CategoryVM> _categories = new();
    private List<ContractorVM> _contractors = new();
    [Parameter]
    public List<EventCallback>? FuncsOnCreated { get; set; } = new();

    private string[] _units = new string[] { "szt", "m", "m2", "m3", "kg", "l", "usługa", "2-PAK", "3-PAK", "4-PAK", };

    private void Cancel() => MudDialog.Cancel();

    private async Task Submit()
    {
        await _form.Validate();

        if (_form.IsValid)
        {
            var response = await productService.Create(@"api/v1/Product", _model);
            if (response.StatusCode == System.Net.HttpStatusCode.Created)
            {
                Snackbar.Add(new MarkupString($"Utworzono <b>{_model.ProductCode}</b>"), Severity.Success);
                MudDialog.Close(DialogResult.Ok(true));
                FuncsOnCreated?.ForEach(async x => await x.InvokeAsync());
            }
            else
            {
                await response.HandleFailure(AlertService);
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var res = await categoryService.GetPagedResult(@"api/v1/Category/get-filtered", new SieveModelVM(1, 500, "", ""));
        _categories = res.Items.ToList();

        var res2 = await contractorService.GetPagedResult(@"api/v1/Contractor/get-filtered", new SieveModelVM(1, 500, "IsSupplier==true", ""));
        _contractors = res2.Items.ToList();
    }

    private async Task<IEnumerable<string>> Search(string value, CancellationToken token)
    {
        if (string.IsNullOrEmpty(value))
            return _units;

        return _units.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
}
