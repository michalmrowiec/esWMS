@page "/products"
@using esWMS.Client.Components.TableColumnsFilters
@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@rendermode InteractiveAuto
@inject IDataService<ProductVM> dataService

<MudTable T="ProductVM"
          ServerData="ServerReload"
          Dense="true"
          Hover="true"
          @ref="table"
          RowClass="cursor-pointer"
          OnRowClick="RowClickEvent">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Artykuły</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                       OnClick="OnSearch" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="ProductCode" T="ProductVM">
                Code
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="ProductCode" OnChangedAction="OnSearch" />

        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="ProductName" T="ProductVM">
                Name
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="ProductName" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="CategoryName" T="ProductVM">
                Category
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="CategoryName" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Price" T="ProductVM">
                Price
            </MudTableSortLabel>
            <DefaultColumntFilter TypeOfField="DefaultColumntFilter.TypeOfFIlterField.Numeric" SearchOptions="searchOptions" Column="Price" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Unit" T="ProductVM">
                Unit
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="Unit" OnChangedAction="OnSearch" />
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nr">@context.ProductCode</MudTd>
        <MudTd DataLabel="Sign">@context.ProductName</MudTd>
        <MudTd DataLabel="Name">@context.Category.CategoryName</MudTd>
        <MudTd DataLabel="Position">@context.Price</MudTd>
        <MudTd DataLabel="Position">@context.Unit</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <TableNoRecordsContent />
    </NoRecordsContent>
    <LoadingContent>
        <TableLoadingContent />
    </LoadingContent>
    <PagerContent>
        <TablePager PageSize="@PageSize" />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public EventCallback<ProductVM> SelectedProduct { get; set; }
    [Parameter]
    public int[]? PageSize { get; set; }
    [Parameter]
    public bool? ShowMediasOnly { get; set; }

    private IEnumerable<ProductVM> Products = [];
    private IEnumerable<ProductVM> pagedData;
    private MudTable<ProductVM> table;

    private int totalItems;

    private Dictionary<string, FilterOption> searchOptions = new()
    {
        { "ProductCode", new("ProductCode") },
        { "ProductName", new("ProductName") },
        { "CategoryName", new("CategoryName") },
        { "Price", new("Price", ">") },
        { "Unit", new("Unit") },
        { "IsMedia", new("IsMedia", "==") },
    };

    protected override void OnInitialized()
    {
        if (ShowMediasOnly == true)
        {
            searchOptions["IsMedia"].Operator = "==";
            searchOptions["IsMedia"].Value = "true";
        }
    }

    private async Task<TableData<ProductVM>> ServerReload(TableState state, CancellationToken token)
    {
        var sm = new SieveModelVM();

        sm.Page = state.Page + 1;
        sm.PageSize = state.PageSize;

        sm.Sorts = string.Concat(state.SortDirection == SortDirection.Descending ? '-' : string.Empty, state.SortLabel ?? string.Empty);

        foreach (var searchOption in searchOptions)
        {
            if (searchOption.Value.Value != string.Empty)
                sm.Filters += searchOption.Value.Column + searchOption.Value.Operator + searchOption.Value.Value + ',';
        }

        var response = await dataService.GetPagedResult(@"api/v1/Product/get-filtered", sm);

        return new TableData<ProductVM>() { TotalItems = response.TotalItems, Items = response.Items };
    }

    private void OnSearch()
    {
        table.ReloadServerData();
    }

    private async Task RowClickEvent(TableRowClickEventArgs<ProductVM> tableRowClickEventArgs)
    {
        await SelectedProduct.InvokeAsync(tableRowClickEventArgs.Item);
    }
}