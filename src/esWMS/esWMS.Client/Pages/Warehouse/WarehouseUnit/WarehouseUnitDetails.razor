@using Newtonsoft.Json
@using esWMS.Client.Pages.Warehouse.WarehouseUnitItem
@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@inject IDataService<WarehouseUnitVM> WarehouseUnitService
@inject IDialogService DialogService

@if (_warehouseUnit == null)
{
    <MudText>Ladowanie...</MudText>
}
else
{
    <MudGrid>
        <MudItem xs="12" lg="4">
            <MudCard>
                <MudCardContent>
                    <MudGrid>
                        <MudItem xs="12">
                            <MudTextField ShrinkLabel @bind-Value="_warehouseUnit.WarehouseUnitId"
                                          Label="Identyfikator"
                                          Variant="Variant.Outlined"
                                          ReadOnly
                                          Margin="Margin.Dense" />
                        </MudItem>
                        <MudItem xs="12">
                            <MudTextField @bind-Value="_warehouseUnit.WarehouseId"
                                          Label="Identyfikator magazynu"
                                          Variant="Variant.Outlined"
                                          ReadOnly
                                          Margin="Margin.Dense" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudGrid>
                                <MudItem xs="9">
                                    <MudTextField ShrinkLabel @bind-Value="_warehouseUnit.LocationId"
                                                  Label="Identyfikator lokalizacji"
                                                  Variant="Variant.Outlined"
                                                  ReadOnly
                                                  Margin="Margin.Dense" />
                                </MudItem>
                                <MudItem xs="3">
                                    <MudButton OnClick="OpenEditLocationDialogAsync"
                                               Variant="Variant.Filled"
                                               EndIcon="@Icons.Material.Outlined.EditLocation"
                                               Color="Color.Default"
                                               Size="Size.Medium"
                                               Class="w-100">
                                        Edytuj
                                    </MudButton>
                                </MudItem>
                            </MudGrid>
                        </MudItem>

                        <MudItem xs="12">
                            <MudNumericField ShrinkLabel @bind-Value="_warehouseUnit.TotalWeight"
                                             Label="Całkowita waga (kg)"
                                             Variant="Variant.Outlined"
                                             Margin="Margin.Dense" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudNumericField ShrinkLabel @bind-Value="_warehouseUnit.TotalLength"
                                             Label="Całkowita długość (m)"
                                             Variant="Variant.Outlined"
                                             Margin="Margin.Dense" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudNumericField ShrinkLabel @bind-Value="_warehouseUnit.TotalWidth"
                                             Label="Całkowita szerokość (m)"
                                             Variant="Variant.Outlined"
                                             Margin="Margin.Dense" />

                        </MudItem>

                        <MudItem xs="12">
                            <MudNumericField ShrinkLabel @bind-Value="_warehouseUnit.TotalHeight"
                                             Label="Całkowita wysokość (m)"
                                             Variant="Variant.Outlined"
                                             Margin="Margin.Dense" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudCheckBox @bind-Value="_warehouseUnit.IsBlocked"
                                         Label="Zablokowana jednostka"
                                         ReadOnly />

                            <MudCheckBox @bind-Value="_warehouseUnit.CanBeStacked"
                                         Label="Może być piętrzona" />
                        </MudItem>

                        <MudItem xs="12">
                            <MudTextField ShrinkLabel @bind-Value="_warehouseUnit.StackOnId"
                                          Label="Piętrzona na"
                                          Variant="Variant.Outlined"
                                          ReadOnly
                                          Margin="Margin.Dense" />
                        </MudItem>
                    </MudGrid>
                </MudCardContent>
            </MudCard>
        </MudItem>

        <MudItem xs="12" lg="8">
            <MudCard>
                <MudCardHeader>
                    <MudText Typo="Typo.subtitle1">Przedmioty w jednostce magazynowej</MudText>
                    <MudSpacer />
                    <MudButton @onclick="OpenDialogAsync"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               Disabled="@(!_selectedItems.Any())">
                        Przenieś/Podziel
                    </MudButton>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable Items="@_warehouseUnit.WarehouseUnitItems"
                              Context="WuiContext"
                              Hover="true"
                              Breakpoint="Breakpoint.Sm"
                              Elevation="0"
                              Dense
                              Bordered
                              MultiSelection
                              @bind-SelectedItems="_selectedItems">
                        <ColGroup>
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                            <col />
                        </ColGroup>
                        <HeaderContent>
                            <MudTh>Id produktu</MudTh>
                            <MudTh>Nazwa produktu</MudTh>
                            <MudTh>Ilość</MudTh>
                            <MudTh>Zablokowane</MudTh>
                            <MudTh>Dostępne</MudTh>
                            <MudTh>Nośnik</MudTh>
                        </HeaderContent>
                        <RowTemplate>
                            <MudTd DataLabel="Id produktu">@WuiContext.ProductId</MudTd>
                            <MudTd DataLabel="Nazwa produktu">@WuiContext.Product?.ProductName</MudTd>
                            <MudTd DataLabel="Ilość">@WuiContext.Quantity</MudTd>
                            <MudTd DataLabel="Zablokowane">@WuiContext.BlockedQuantity</MudTd>
                            <MudTd DataLabel="Dostępne">@(WuiContext.Quantity - WuiContext.BlockedQuantity)</MudTd>
                            <MudTd DataLabel="Nośnik">
                                <MudCheckBox @bind-Value="@WuiContext.IsMediaOfWarehouseUnit"
                                             Size="Size.Small"
                                             Disabled />
                            </MudTd>
                        </RowTemplate>
                    </MudTable>
                </MudCardContent>
            </MudCard>
        </MudItem>
    </MudGrid>
}

@code {
    [Parameter]
    public string WarehouseUnitId { get; set; }

    private WarehouseUnitVM? _warehouseUnit;
    private HashSet<WarehouseUnitItemVM> _selectedItems = new();

    protected override async Task OnInitializedAsync()
    {
        await ReloadWarehouseUnit();
    }

    private Task OpenDialogAsync()
    {
        if (!_selectedItems.Any())
            return Task.CompletedTask;

        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
        var parameters = new DialogParameters<MoveWarehouseUnitItemDialog>
        {
            { x => x.WarehouseId, _warehouseUnit?.WarehouseId },
            { x => x.WarehouseUnitItemsToMove, _selectedItems.ToList() },
            { x => x.FuncsOnCreated, new List<EventCallback>() { EventCallback.Factory.Create(this, ReloadWarehouseUnit) } }
        };
        return DialogService.ShowAsync<MoveWarehouseUnitItemDialog>(null, parameters, options);
    }

    private async Task ReloadWarehouseUnit()
    {
        var response = await WarehouseUnitService.Get(@"api/v1/WarehouseUnit", new() { { "WarehouseUnitId", WarehouseUnitId } });
        if (response == null)
        {
            return;
        }

        var json = await response.Content.ReadAsStringAsync();
        var resObj = JsonConvert.DeserializeObject<List<WarehouseUnitVM>>(json);

        _warehouseUnit = resObj?.First() ?? new();

        StateHasChanged();
    }

    private Task OpenEditLocationDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, FullWidth = true, MaxWidth = MaxWidth.Medium };
        var parameters = new DialogParameters<SetLocationModalDialog>
        {
            { x => x.WarehouseUnit, _warehouseUnit },
            { x => x.FuncsOnSubmit, new List<EventCallback>() { EventCallback.Factory.Create(this, ReloadWarehouseUnit) } }
        };
        return DialogService.ShowAsync<SetLocationModalDialog>(null, parameters, options);
    }
}
