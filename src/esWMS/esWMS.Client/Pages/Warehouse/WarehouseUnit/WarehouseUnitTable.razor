@page "/warehouseunit"
@using esWMS.Client.Pages.OnePage
@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@using esWMS.Client.Components.TableColumnsFilters
@rendermode InteractiveAuto
@inject IDataService<WarehouseUnitVM> warehouseUnitService
@inject OnePageState onePageState
@inject IDialogService DialogService

<MudTable T="WarehouseUnitVM"
          ServerData="ServerReload"
          Dense="true"
          Hover="true"
          @ref="table"
          RowClass="cursor-pointer"
          OnRowClick="RowClickEvent"
          MultiSelection="@(TypeOfSelection == SelectionType.Multi)"
          @bind-SelectedItems="selectedWarehouseUnits">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Jednostki magazynowe</MudText>
        <MudSpacer />
        <MudButton @onclick="OpenDialogAsync"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   hidden="@(TypeOfSelection == SelectionType.Multi)">
            Utwórz jednostkę
        </MudButton>
        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                       OnClick="OnSearch" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="WarehouseUnitId" T="WarehouseUnitVM">
                Id
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions"
                                  Column="WarehouseUnitId"
                                  OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="WarehouseId" T="WarehouseUnitVM">
                Id magazynu
            </MudTableSortLabel>
            <DefaultColumntFilter Disabled="@(WarehouseIdFilter != null)"
                                  SearchOptions="searchOptions" Column="WarehouseId"
                                  OnChangedAction="OnSearch" />
        </MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id">@context.WarehouseUnitId</MudTd>
        <MudTd DataLabel="Id magazynu">@context.WarehouseId</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] {5,10,20,50}" />
    </PagerContent>
</MudTable>

@if (TypeOfSelection == SelectionType.Multi)
{
    <MudButton @onclick="SubmitSelection"
               Variant="Variant.Filled"
               Color="Color.Primary"
               hidden="@(TypeOfSelection != SelectionType.Multi)">
        Potwierdź
    </MudButton>
}

@code {
    [Parameter]
    public SelectionType TypeOfSelection { get; set; }
    [Parameter]
    public string? WarehouseIdFilter { get; set; }
    [Parameter]
    public EventCallback<HashSet<WarehouseUnitVM>> SelectedWarehouseUnits { get; set; }

    private HashSet<WarehouseUnitVM> selectedWarehouseUnits { get; set; } = new();
    private IEnumerable<WarehouseUnitVM> pagedData;
    private MudTable<WarehouseUnitVM> table;

    private int totalItems;

    private Dictionary<string, FilterOption> searchOptions = new()
    {
        { "WarehouseUnitId", new("WarehouseUnitId") },
        { "WarehouseId", new("WarehouseId") }
    };

    protected override void OnInitialized()
    {
        if (WarehouseIdFilter != null)
        {
            searchOptions["WarehouseId"].Operator = "==";
            searchOptions["WarehouseId"].Value = WarehouseIdFilter;
        }
    }

    private async Task<TableData<WarehouseUnitVM>> ServerReload(TableState state, CancellationToken token)
    {
        var sm = new SieveModelVM();

        sm.Page = state.Page + 1;
        sm.PageSize = state.PageSize;

        sm.Sorts = string.Concat(state.SortDirection == SortDirection.Descending ? '-' : string.Empty, state.SortLabel ?? string.Empty);

        foreach (var searchOption in searchOptions)
        {
            if (searchOption.Value.Value != string.Empty)
                sm.Filters += searchOption.Value.Column + searchOption.Value.Operator + searchOption.Value.Value + ',';
        }

        var response = await warehouseUnitService.GetPagedResult(@"api/v1/WarehouseUnit/get-filtered", sm);

        return new TableData<WarehouseUnitVM>() { TotalItems = response.TotalItems, Items = response.Items };
    }

    private void OnSearch()
    {
        table.ReloadServerData();
    }

    private async Task RowClickEvent(TableRowClickEventArgs<WarehouseUnitVM> tableRowClickEventArgs)
    {
        if (TypeOfSelection == SelectionType.Single)
        {
            if (tableRowClickEventArgs.Item != null)
            {
                selectedWarehouseUnits.Add(tableRowClickEventArgs.Item);
            }
            await SelectedWarehouseUnits.InvokeAsync(selectedWarehouseUnits);
        }
        else if (TypeOfSelection == SelectionType.None) // im not sure about that <-
        {
            // open details tab
        }
    }

    private async Task SubmitSelection()
    {
        await SelectedWarehouseUnits.InvokeAsync(selectedWarehouseUnits);
    }

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<AddWarehouseUnitDialogForm>
        {
            { x => x.FuncsOnCreated, new List<EventCallback>() { EventCallback.Factory.Create(this, table.ReloadServerData) } }
        };
        return DialogService.ShowAsync<AddWarehouseUnitDialogForm>(null, parameters, options);
    }

    public enum SelectionType
    {
        Single,
        Multi,
        None
    }
}