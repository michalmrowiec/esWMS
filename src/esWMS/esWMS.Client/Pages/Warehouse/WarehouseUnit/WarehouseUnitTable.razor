@page "/warehouseunit"
@using esWMS.Client.Pages.OnePage
@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@using esWMS.Client.Components.TableColumnsFilters
@rendermode InteractiveAuto
@inject IDataService<WarehouseUnitVM> warehouseUnitService
@inject OnePageState onePageState
@inject IDialogService DialogService

<style>
    .selected-row {
        background-color: #7e6fff;
    }

    .child-row {
        background-color: #a7a7a717;
        border-left: 5px solid #d0d0d0;
    }
</style>

<MudTable T="WarehouseUnitVM"
          ServerData="ServerReload"
          Dense="true"
          Hover="true"
          @ref="table"
          RowClass="cursor-pointer"
          RowClassFunc="GetRowClass"
          OnRowClick="RowClickEvent"
          MultiSelection="@(TypeOfSelection == SelectionType.Multi)"
          @bind-SelectedItems="selectedWarehouseUnits">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Jednostki magazynowe</MudText>
        <MudSpacer />
        <MudButton @onclick="OpenDialogAsync"
                   Variant="Variant.Filled"
                   Color="Color.Primary"
                   hidden="@(TypeOfSelection == SelectionType.Multi)">
            Utwórz jednostkę
        </MudButton>
        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                       OnClick="OnSearch" />
    </ToolBarContent>
    <ColGroup>
        <col style="width:auto;" />
        <col />
        <col />
        <col />
    </ColGroup>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="WarehouseUnitId" T="WarehouseUnitVM">
                Id
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions"
                                  Column="WarehouseUnitId"
                                  OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="WarehouseId" T="WarehouseUnitVM">
                Id magazynu
            </MudTableSortLabel>
            <DefaultColumntFilter Disabled="@(WarehouseIdFilter != null)"
                                  SearchOptions="searchOptions" Column="WarehouseId"
                                  OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="IsBlocked" T="WarehouseUnitVM">
                Zablokowana
            </MudTableSortLabel>
            <BoolColumnTableFilter Disabled="ShowOnlyUnblocked"
                                   SearchOptions="searchOptions"
                                   Column="IsBlocked"
                                   OnChangedAction="OnSearch" />
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudButton Variant="Variant.Outlined"
                       Size="Size.Small"
                       OnClick="@(() => ShowBtnPress(context.WarehouseUnitId))">@((wuIdShow[context.WarehouseUnitId] == true) ? $"Ukryj pozycje ({context.WarehouseUnitItems.Count})" : $"Pokaż pozycje ({context.WarehouseUnitItems.Count})")</MudButton>
        </MudTd>
        <MudTd DataLabel="Id">@context.WarehouseUnitId</MudTd>
        <MudTd DataLabel="Id magazynu">@context.WarehouseId</MudTd>
        <MudTd DataLabel="Zablokowana">
            <MudCheckBox @bind-Value="@context.IsBlocked" Size="Size.Small" Disabled="true"></MudCheckBox>
        </MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (wuIdShow[context.WarehouseUnitId] == true)
        {
            <MudTr>
                <td colspan="4">
                    <MudCard Elevation="0" Style="margin-left:50px;">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body2">Pozycje jednostki: <strong>@context.WarehouseUnitId</strong></MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="pa-0">
                            <MudTable Items="@context.WarehouseUnitItems.OrderBy(x => x.ProductId)"
                                      Context="WuiContext"
                                      Hover="true"
                                      Breakpoint="Breakpoint.Sm"
                                      Elevation="0"
                                      Dense
                                      Bordered
                                      RowClass="child-row">
                                <ColGroup>
                                    <col />
                                    <col />
                                    <col />
                                    <col />
                                    <col />
                                    <col />
                                    <col />
                                </ColGroup>
                                <HeaderContent>
                                    <MudTh>Id pozycji</MudTh>
                                    <MudTh>Id magazynu</MudTh>
                                    <MudTh>Id produktu</MudTh>
                                    <MudTh>Nazwa produktu</MudTh>
                                    <MudTh>Ilość</MudTh>
                                    <MudTh>Zablokowane</MudTh>
                                    <MudTh>Dostępne</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Id pozycji">@WuiContext.WarehouseUnitItemId</MudTd>
                                    <MudTd DataLabel="Id magazynu">@WuiContext.WarehouseUnit.WarehouseId</MudTd>
                                    <MudTd DataLabel="Id produktu">@WuiContext.ProductId</MudTd>
                                    <MudTd DataLabel="Nazwa produktu">@WuiContext.Product.ProductName</MudTd>
                                    <MudTd DataLabel="Ilość">@WuiContext.Quantity</MudTd>
                                    <MudTd DataLabel="Zablokowane">@WuiContext.BlockedQuantity</MudTd>
                                    <MudTd DataLabel="Dostępne">@(WuiContext.Quantity - WuiContext.BlockedQuantity)</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudCardContent>
                    </MudCard>
                </td>
            </MudTr>
            <MudDivider />
        }
    </ChildRowContent>
    <NoRecordsContent>
        <MudText>No matching records found</MudText>
    </NoRecordsContent>
    <LoadingContent>
        <MudText>Loading...</MudText>
    </LoadingContent>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] {5,10,20,50}" />
    </PagerContent>
</MudTable>

@if (TypeOfSelection == SelectionType.Multi)
{
    <MudButton @onclick="SubmitSelection"
               Variant="Variant.Filled"
               Color="Color.Primary"
               hidden="@(TypeOfSelection != SelectionType.Multi)">
        Potwierdź
    </MudButton>
}

@code {
    [Parameter]
    public SelectionType TypeOfSelection { get; set; } = SelectionType.None;
    [Parameter]
    public string? WarehouseIdFilter { get; set; }
    [Parameter]
    public bool ShowOnlyUnblocked { get; set; } = false;
    [Parameter]
    public EventCallback<HashSet<WarehouseUnitVM>> SelectedWarehouseUnits { get; set; }

    private HashSet<WarehouseUnitVM> selectedWarehouseUnits { get; set; } = new();
    private IEnumerable<WarehouseUnitVM> pagedData;
    private MudTable<WarehouseUnitVM> table;
    private Dictionary<string, bool> wuIdShow = new();
    private int totalItems;

    private Dictionary<string, FilterOption> searchOptions = new()
    {
        { "WarehouseUnitId", new("WarehouseUnitId") },
        { "WarehouseId", new("WarehouseId") },
        { "IsBlocked", new("IsBlocked", "==", string.Empty) }
    };

    private string GetRowClass(WarehouseUnitVM item, int rowIndex)
    {
        if (selectedWarehouseUnits.Contains(item))
        {
            Console.WriteLine("selectedrow!");
            return "selected-row";
        }
        return string.Empty;
    }

    private void ShowBtnPress(string id)
    {
        wuIdShow[id] = !wuIdShow[id];
    }

    protected override void OnInitialized()
    {
        if (WarehouseIdFilter != null)
        {
            searchOptions["WarehouseId"].Operator = "==";
            searchOptions["WarehouseId"].Value = WarehouseIdFilter;
        }
        if (ShowOnlyUnblocked)
        {
            searchOptions["IsBlocked"].Operator = "==";
            searchOptions["IsBlocked"].Value = "false";
        }
    }

    private async Task<TableData<WarehouseUnitVM>> ServerReload(TableState state, CancellationToken token)
    {
        var sm = new SieveModelVM();

        sm.Page = state.Page + 1;
        sm.PageSize = state.PageSize;

        sm.Sorts = string.Concat(state.SortDirection == SortDirection.Descending ? '-' : string.Empty, state.SortLabel ?? string.Empty);

        foreach (var searchOption in searchOptions)
        {
            if (searchOption.Value.Value != string.Empty)
                sm.Filters += searchOption.Value.Column + searchOption.Value.Operator + searchOption.Value.Value + ',';
        }

        var response = await warehouseUnitService.GetPagedResult(@"api/v1/WarehouseUnit/get-filtered", sm);

        wuIdShow = response.Items.ToDictionary(key => key.WarehouseUnitId, value => false);

        return new TableData<WarehouseUnitVM>() { TotalItems = response.TotalItems, Items = response.Items };
    }

    private void OnSearch()
    {
        table.ReloadServerData();
    }

    private async Task RowClickEvent(TableRowClickEventArgs<WarehouseUnitVM> tableRowClickEventArgs)
    {
        if (TypeOfSelection == SelectionType.Single)
        {
            if (tableRowClickEventArgs.Item != null)
            {
                selectedWarehouseUnits.Clear();
                selectedWarehouseUnits.Add(tableRowClickEventArgs.Item);
            }
            await SelectedWarehouseUnits.InvokeAsync(selectedWarehouseUnits);
        }
        else if (TypeOfSelection == SelectionType.None) // im not sure about that <-
        {
            // open details tab
        }
    }

    private async Task SubmitSelection()
    {
        await SelectedWarehouseUnits.InvokeAsync(selectedWarehouseUnits);
    }

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        var parameters = new DialogParameters<AddWarehouseUnitDialogForm>
        {
            { x => x.FuncsOnCreated, new List<EventCallback>() { EventCallback.Factory.Create(this, table.ReloadServerData) } }
        };
        return DialogService.ShowAsync<AddWarehouseUnitDialogForm>(null, parameters, options);
    }

    public enum SelectionType
    {
        Single,
        Multi,
        None
    }
}