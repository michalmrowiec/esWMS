@page "/zonelocations"
@using esWMS.Client.Components.TableColumnsFilters
@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@rendermode InteractiveAuto
@inject IDataService<LocationVM> dataService
@inject IDialogService DialogService

<style>
    .selected-row {
        background-color: #7e6fff;
    }

    .child-row {
        background-color: #a7a7a717;
        border-left: 5px solid #d0d0d0;
    }
</style>

<MudTable T="ZoneVM"
          ServerData="ServerReload"
          Dense="true"
          Hover="true"
          @ref="table"
          RowClass="cursor-pointer">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Lokalizacje</MudText>
        <MudSpacer />
        <MudButton @onclick="OpenDialogAsync"
                   Variant="Variant.Filled"
                   Color="Color.Primary">
            Utwórz lokalizację
        </MudButton>
        <MudButton Class="ms-3"
                   @onclick="OpenZoneDialogAsync"
                   Variant="Variant.Filled"
                   Color="Color.Primary">
            Utwórz strefę
        </MudButton>
        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                       OnClick="OnSearch" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh></MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="LocationId" T="LocationVM">
                Id
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="LocationId" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="ZoneId" T="ZoneVM">
                Id strefy
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="ZoneId" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="ZoneName" T="ZoneVM">
                Nazwa strefy
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="ZoneName" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="WarehouseId" T="ZoneVM">
                Id magazynu
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="WarehouseId" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Capacity" T="LocationVM">
                Pojemność
            </MudTableSortLabel>
            <DefaultColumntFilter TypeOfField="DefaultColumntFilter.TypeOfFIlterField.Numeric"
                                  SearchOptions="searchOptions"
                                  Column="Capacity"
                                  OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="IsBusy" T="LocationVM">
                Zajęte
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="IsBusy" OnChangedAction="OnSearch" />
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudButton Variant="Variant.Outlined"
                       Size="Size.Small"
                       OnClick="@(() => ShowBtnPress(context.ZoneId))">@((locIdShow[context.ZoneId] == true) ? $"Ukryj pozycje ({locations.Where(x => x.ZoneId == context.ZoneId).Count()})" : $"Pokaż pozycje ({locations.Where(x => x.ZoneId == context.ZoneId).Count()})")</MudButton>
        </MudTd>
        <MudTd DataLabel="Id">@context.ZoneId</MudTd>
        <MudTd DataLabel="Id strefy">@context.ZoneName</MudTd>
        <MudTd DataLabel="Id magazynu">@context.WarehouseId</MudTd>
    </RowTemplate>
    <ChildRowContent>
        @if (locIdShow[context.ZoneId] == true)
        {
            <MudTr>
                <td colspan="4">
                    <MudCard Elevation="0" Style="margin-left:50px;">
                        <MudCardHeader>
                            <CardHeaderContent>
                                <MudText Typo="Typo.body2">Pozycje strefy: <strong>@context.ZoneId</strong></MudText>
                            </CardHeaderContent>
                        </MudCardHeader>
                        <MudCardContent Class="pa-0">
                            <MudTable Items="@locations"
                                      Context="locationContext"
                                      Hover="true"
                                      Breakpoint="Breakpoint.Sm"
                                      Elevation="0"
                                      Dense
                                      Bordered
                                      RowClass="child-row">
                                <RowTemplate>
                                    <MudTd DataLabel="Id">@locationContext.LocationId</MudTd>
                                    <MudTd DataLabel="Pojemność">
                                        @(locationContext.Capacity % 1 == 0
                                        ? locationContext.Capacity.ToString("0")
                                        : locationContext.Capacity.ToString("0.00"))
                                    </MudTd>
                                    <MudTd DataLabel="Zajęte">@locationContext.IsBusy</MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudCardContent>
                    </MudCard>
                </td>
            </MudTr>
            <MudDivider />
        }
    </ChildRowContent>

    <NoRecordsContent>
        <TableNoRecordsContent />
    </NoRecordsContent>
    <LoadingContent>
        <TableLoadingContent />
    </LoadingContent>
    <PagerContent>
        <TablePager PageSize="@PageSize" />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public int[]? PageSize { get; set; }

    private Dictionary<string, bool> locIdShow = new();
    private IEnumerable<LocationVM> locations = [];

    private IEnumerable<ZoneVM> Products = [];
    private IEnumerable<ZoneVM> pagedData;
    private MudTable<ZoneVM> table;

    private int totalItems;

    private Dictionary<string, FilterOption> searchOptions = new()
    {
        { "ZoneId", new("ZoneId") },
        { "ZoneName", new("ZoneName") },
        { "WarehouseId", new("WarehouseId") },
        { "LocationId", new("LocationId") },
        { "Capacity", new("Capacity", ">") },
        { "IsBusy", new("IsBusy", "==", string.Empty) }
    };

    private void ShowBtnPress(string id)
    {
        locIdShow[id] = !locIdShow[id];
    }

    private async Task<TableData<ZoneVM>> ServerReload(TableState state, CancellationToken token)
    {
        var sm = new SieveModelVM();

        sm.Page = state.Page + 1;
        sm.PageSize = state.PageSize;

        sm.Sorts = string.Concat(state.SortDirection == SortDirection.Descending ? '-' : string.Empty, state.SortLabel ?? string.Empty);

        foreach (var searchOption in searchOptions)
        {
            if (searchOption.Value.Value != string.Empty)
                sm.Filters += searchOption.Value.Column + searchOption.Value.Operator + searchOption.Value.Value + ',';
        }

        var response = await dataService.GetPagedResult(@"api/v1/Location/get-filtered", sm);
        locIdShow = response.Items.ToDictionary(key => key.ZoneId, value => false);
        locations = response.Items;
        IEnumerable<ZoneVM> zones = response.Items.Select(x => x.Zone).Distinct() ?? [];

        return new TableData<ZoneVM>() { TotalItems = response.TotalItems, Items = zones };
    }

    private void OnSearch()
    {
        table.ReloadServerData();
    }

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
        var parameters = new DialogParameters<AddLocationModalDialogForm>
        {
            { x => x.FuncsOnCreated, new List<EventCallback>() { EventCallback.Factory.Create(this, table.ReloadServerData) } }
        };
        return DialogService.ShowAsync<AddLocationModalDialogForm>(null, parameters, options);
    }

    private Task OpenZoneDialogAsync()
    {
        var options = new DialogOptions
            {
                CloseOnEscapeKey = true,
                CloseButton = true,
                MaxWidth = MaxWidth.Medium,
                FullWidth = true
            };
        var parameters = new DialogParameters<AddZoneModalDialogForm>
        {
            { x => x.FuncsOnCreated, new List<EventCallback>() { EventCallback.Factory.Create(this, table.ReloadServerData) } }
        };
        return DialogService.ShowAsync<AddZoneModalDialogForm>(null, parameters, options);
    }
}