@using Newtonsoft.Json
@using esWMS.Client.Components.Document
@using esWMS.Client.Pages.WarehouseEnvironment.WarehouseUnit
@using esWMS.Client.PrintTemplates.Models
@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@using esWMS.Client.ViewModels.Documents
@using static esWMS.Client.Pages.WarehouseEnvironment.WarehouseUnit.WarehouseUnitTable
@inject IDialogService DialogService
@inject IDataService<MmpVM> mmpDataService
@inject IDataService<WarehouseUnitVM> warehouseUnitDataService
@inject IDocumentDataService documentDataService
@inject ISnackbar Snackbar
@inject IAlertService AlertService

<PrintDocumentButton Disabled="@(!MmpVM.IsApproved)"
                     DocumentPrintModel="new DocumentPrintModel(
                        model: MmpVM,
                        targetWarehouse: MmpVM.FromWarehouse ?? new(),
                        documentType: DocumentTypesName.MMP,
                        contractorType: DocumentContractorType.Supplier)" />

<MudButton EndIcon="@Icons.Material.Filled.Refresh"
           OnClick="RefreshMmp">
    Odśwież
</MudButton>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Numer dokumentu:</strong> @MmpVM.DocumentId
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Numer powiązanego dokumentu MM-:</strong> @MmpVM.RelatedMmmId
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Magazyn wydający:</strong>
    [@MmpVM.IssueWarehouseId] @MmpVM.IssueWarehouse?.WarehouseName
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Komentarz:</strong> @MmpVM.Comment
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Data wystawienia dokumentu:</strong>
    @MmpVM.DocumentIssueDate.ToString("dd-MM-yyyy")
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Zatwierdzono: </strong>
    @if (MmpVM.IsApproved)
    {
        <span>TAK</span>
    }
    else
    {
        <span>NIE</span>
    }
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Data przyjęcia towaru:</strong>
    @MmpVM.GoodsReceiptDate?.ToString("dd-MM-yyyy")
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Magazyn wysyłający: </strong>
    [@MmpVM.FromWarehouseId] @MmpVM.FromWarehouse?.WarehouseName
</MudText>

<DocumentItemsTable DocumentItems="@MmpVM.DocumentItems"
                    TableType="DocumentItemsTable.DocumentItemTableType.DocumentDetails" />

@if (!MmpVM.IsApproved && _warehouseUnitIds.Count > 0)
{
    <WarehouseUnitTable WarehouseUnitIdFilter="@_warehouseUnitIds"
                        TypeOfSelection="SelectionType.None" />
}

@if (MmpVM.DocumentItems.All(x => x.IsApproved) &&
!MmpVM.IsApproved)
{
    <MudButton OnClick="@(() => ApproveMmp())"
               Size="@Size.Small"
               Variant="@Variant.Filled"
               Color="@Color.Primary"
               Class="my-3">
        Zatwierdź
    </MudButton>
}
else if (MmpVM.IsApproved)
{
    <MudButton Size="@Size.Small"
               Variant="@Variant.Filled"
               Color="@Color.Primary"
               Disabled
               Class="my-3">
        Zatwierdzono
    </MudButton>
}
else
{
    <MudButton Size="@Size.Small"
               Variant="@Variant.Filled"
               Color="@Color.Primary"
               Disabled
               Class="my-3">
        Zatwierdź
    </MudButton>
}

@code {
    [CascadingParameter]
    public bool IsActive { get; set; }
    [Parameter]
    public string DocumentId { get; set; }
    public MmpVM MmpVM { get; set; } = new();
    [Parameter]
    public List<EventCallback>? EventCallbacks { get; set; }
    public HashSet<string> _warehouseUnitIds = new();

    protected override async Task OnParametersSetAsync()
    {
        if (IsActive)
        {
            await RefreshMmp();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await RefreshMmp();

        if (!MmpVM.IsApproved)
        {
            var idsResponse = await mmpDataService.Get(@"api/v1/Mmp/warehouse-unit-ids", new() { { "DocumentId", MmpVM.DocumentId } });
            if (idsResponse == null)
            {
                return;
            }

            var json = await idsResponse.Content.ReadAsStringAsync();
            var resObj = JsonConvert.DeserializeObject<string[]>(json);

            _warehouseUnitIds = resObj?.ToHashSet<string>() ?? new();

            StateHasChanged();
        }
    }

    private async Task RefreshMmp()
    {
        var response = await mmpDataService.Get(@"api/v1/Mmp/details", new() { { "DocumentId", DocumentId } });

        if (response.IsSuccessStatusCode)
        {
            var json = await response.Content.ReadAsStringAsync();
            var mmpDetails = JsonConvert.DeserializeObject<MmpDetailsVM>(json) ?? new();
            MmpVM = mmpDetails;
        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }

    public async Task ApproveMmp()
    {
        var response = await documentDataService.ApproveDocument(@"api/v1/Mmp/approve", new { DocumentId = MmpVM.DocumentId });

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var json = await response.Content.ReadAsStringAsync();
            var responseObj = JsonConvert.DeserializeObject<WzVM>(json);

            await RefreshMmp();

            Snackbar.Add(new MarkupString($"Pomyślnie zatwierdzono <b>{MmpVM.DocumentId}</b>"), Severity.Success);
        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }
}
