@using Newtonsoft.Json
@using esWMS.Client.Components.Document
@using esWMS.Client.Pages.Warehouse.WarehouseUnit
@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@using esWMS.Client.ViewModels.Documents
@inject IDialogService DialogService
@inject IDataService<MmmVM> mmmDataService
@inject IDocumentDataService documentDataService
@inject ISnackbar Snackbar
@inject IAlertService AlertService

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Numer dokumentu:</strong> @MmmVM.DocumentId
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Numer powiązanego dokumentu MM+:</strong> @MmmVM.RelatedMmp?.DocumentId
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Magazyn wydający:</strong>
    [@MmmVM.IssueWarehouseId] @MmmVM.IssueWarehouse?.WarehouseName
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Komentarz:</strong> @MmmVM.Comment
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Data wystawienia dokumentu:</strong>
    @MmmVM.DocumentIssueDate.ToString("dd-MM-yyyy")
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Zatwierdzono: </strong>
    @if (MmmVM.IsApproved)
    {
        <span>TAK</span>
    }
    else
    {
        <span>NIE</span>
    }
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Data wydania towaru:</strong>
    @MmmVM.GoodsReleaseDate?.ToString("dd-MM-yyyy")
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Magazyn odbierający: </strong>
    [@MmmVM.ToWarehouseId] @MmmVM.ToWarehouse?.WarehouseName
</MudText>

<DocumentItemsTable DocumentItems="@MmmVM.DocumentItems"
                    TableType="DocumentItemsTable.DocumentItemTableType.DocumentDetails" />

@if (!MmmVM.IsApproved && _warehouseUnitIds.Count > 0)
{
    <WarehouseUnitTable WarehouseUnitIdFilter="@_warehouseUnitIds"
                        TypeOfSelection="Warehouse.WarehouseUnit.WarehouseUnitTable.SelectionType.None" />
}

@if (MmmVM.DocumentItems.All(x => x.IsApproved) &&
!MmmVM.IsApproved)
{
    <MudButton OnClick="@(() => ApproveMmm())"
               Size="@Size.Small"
               Variant="@Variant.Filled"
               Color="@Color.Primary"
               Class="mb-3">
        Zatwierdź dokument
    </MudButton>
}
else if (MmmVM.IsApproved)
{
    <MudButton Size="@Size.Small"
               Variant="@Variant.Filled"
               Color="@Color.Primary"
               Disabled
               Class="mb-3">
        Zatwierdzono
    </MudButton>
}
else
{
    <MudButton Size="@Size.Small"
               Variant="@Variant.Filled"
               Color="@Color.Primary"
               Disabled
               Class="mb-3">
        Zatwierdź dokument
    </MudButton>
}

@code {
    [CascadingParameter]
    public bool IsActive { get; set; }
    [Parameter]
    public MmmVM MmmVM { get; set; } = new();
    [Parameter]
    public List<EventCallback>? EventCallbacks { get; set; }
    public HashSet<string> _warehouseUnitIds = new();

    protected override async Task OnParametersSetAsync()
    {
        if (IsActive)
        {
            await RefreshMmm();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        if (!MmmVM.IsApproved)
        {
            var idsResponse = await mmmDataService.Get(@"api/v1/Mmm/warehouse-unit-ids", new() { { "DocumentId", MmmVM.DocumentId } });
            if (idsResponse == null)
            {
                return;
            }

            var json = await idsResponse.Content.ReadAsStringAsync();
            var resObj = JsonConvert.DeserializeObject<string[]>(json);

            _warehouseUnitIds = resObj?.ToHashSet<string>() ?? new();

            StateHasChanged();
        }
    }

    private async Task RefreshMmm()
    {
        var sm = new SieveModelVM();

        sm.Page = 1;
        sm.PageSize = 1;
        sm.Filters = $"DocumentId=={MmmVM.DocumentId}";

        var response = await mmmDataService.GetPagedResult(@"api/v1/Mmm/get-filtered", sm);

        if (response.Items.FirstOrDefault() != null)
        {
            MmmVM = response.Items.First();
        }

        StateHasChanged();
    }

    public async Task ApproveMmm()
    {
        var response = await documentDataService.ApproveDocument(@"api/v1/Mmm/approve", new { DocumentId = MmmVM.DocumentId });

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var json = await response.Content.ReadAsStringAsync();
            var responseObj = JsonConvert.DeserializeObject<WzVM>(json);

            await RefreshMmm();

            Snackbar.Add(new MarkupString($"Pomyślnie zatwierdzono <b>{MmmVM.DocumentId}</b>"), Severity.Success);
        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }
}
