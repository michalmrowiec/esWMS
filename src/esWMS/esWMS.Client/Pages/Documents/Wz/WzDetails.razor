@using Newtonsoft.Json
@using esWMS.Client.Components.Document
@using esWMS.Client.Services
@using esWMS.Client.States
@using esWMS.Client.ViewModels
@using esWMS.Client.ViewModels.Documents
@inject IDialogService DialogService
@inject IDataService<WzVM> wzDataService
@inject IDocumentDataService documentDataService
@inject ISnackbar Snackbar
@inject IAlertService AlertService
@inject IConfirmDialogService ConfirmDialogService
@inject OnePageState OnePageState

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Numer dokumentu:</strong> @WzVM.DocumentId
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Magazyn wydający:</strong>
    [@WzVM.IssueWarehouseId] @WzVM.IssueWarehouse?.WarehouseName
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Komentarz:</strong> @WzVM.Comment
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Data wystawienia dokumentu:</strong>
    @WzVM.DocumentIssueDate.ToString("dd-MM-yyyy")
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Zatwierdzono: </strong>
    @if (WzVM.IsApproved)
    {
        <span>TAK</span>
    }
    else
    {
        <span>NIE</span>
    }
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Data wydania towaru:</strong>
    @WzVM.GoodsReleaseDate?.ToString("dd-MM-yyyy")
</MudText>

<MudText Typo="Typo.body1" Class="mb-3">
    <strong>Kontrahent:</strong>
    [@WzVM.RecipientContractorId] @WzVM.RecipientContractor?.ContractorName
</MudText>

<DocumentItemsTable DocumentItems="@WzVM.DocumentItems"
                    TableType="DocumentItemsTable.DocumentItemTableType.DocumentDetails"
                    OnApprove="OpenDialogAsync"
                    DeleteFunc="OpenDeleteDialog" />

@if (WzVM.DocumentItems.All(x => x.IsApproved) &&
!WzVM.IsApproved)
{
    <MudButton OnClick="@(() => ApproveWz())"
               Size="@Size.Small"
               Variant="@Variant.Filled"
               Color="@Color.Primary"
               Class="mb-3">
        Zatwierdź
    </MudButton>
}
else if (WzVM.IsApproved)
{
    <MudButton Size="@Size.Small"
               Variant="@Variant.Filled"
               Color="@Color.Primary"
               Disabled
               Class="mb-3">
        Zatwierdzono
    </MudButton>
}
else
{
    <MudButton Size="@Size.Small"
               Variant="@Variant.Filled"
               Color="@Color.Primary"
               Disabled
               Class="mb-3">
        Zatwierdź
    </MudButton>
}

@code {
    [Parameter]
    public WzVM WzVM { get; set; } = new();
    [Parameter]
    public List<EventCallback>? EventCallbacks { get; set; }
    [Parameter]
    public Guid TabId { get; set; }

    private Task OpenDialogAsync(DocumentItemVM documentItem)
    {
        InvokeAsync(RefreshWz);
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<ApproveIssuedItemDialog>
        {
            { x => x.Uri, @"api/v1/Wz/approve-items" },
            { x => x.DocumentItemVM, documentItem},
            { x => x.FuncsOnAdded, new List<EventCallback>() { EventCallback.Factory.Create(this, RefreshWz) } }
        };
        return DialogService.ShowAsync<ApproveIssuedItemDialog>(null, parameters, options);
    }

    private async Task RefreshWz()
    {
        var sm = new SieveModelVM();

        sm.Page = 1;
        sm.PageSize = 1;
        sm.Filters = $"DocumentId=={WzVM.DocumentId}";

        var response = await wzDataService.GetPagedResult(@"api/v1/Wz/get-filtered", sm);

        if (response.Items.FirstOrDefault() != null)
        {
            WzVM = response.Items.First();
        }

        StateHasChanged();
    }

    public async Task ApproveWz()
    {
        var response = await documentDataService.ApproveDocument(@"api/v1/Wz/approve", new { DocumentId = WzVM.DocumentId });

        if (response.StatusCode == System.Net.HttpStatusCode.OK)
        {
            var json = await response.Content.ReadAsStringAsync();
            var responseObj = JsonConvert.DeserializeObject<WzVM>(json);

            await RefreshWz();

            Snackbar.Add(new MarkupString($"Pomyślnie zatwierdzono <b>{WzVM.DocumentId}</b>"), Severity.Success);

        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }

    private async Task OpenDeleteDialog(DocumentItemVM documentItem)
    {
        bool confirm = false;

        await ConfirmDialogService.OpenDeleteDialogAsync(
            "Usuwanie pozycji", "Czy na pewno chcesz usunąć pozycję?",
            Services.ConfirmDialogService.ButtonDialogType.Delete,
            EventCallback.Factory.Create(this, () => confirm = true));

        if (confirm)
        {
            await DeleteAsync(documentItem);
        }
    }

    private async Task DeleteAsync(DocumentItemVM documentItem)
    {
        var response = await wzDataService.Delete(@"api/v1/Wz/item/" + documentItem.DocumentItemId);
        if (response.IsSuccessStatusCode)
        {
            Snackbar.Add(new MarkupString("Usunięto pozycję"), Severity.Success);
            await RefreshWz();

        }
        else
        {
            await response.HandleFailure(AlertService);
        }
    }
}
