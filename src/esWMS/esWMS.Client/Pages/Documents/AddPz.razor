@using esWMS.Client.Pages.Documents
@using esWMS.Client.Services
@using esWMS.Client.ViewModels
@using esWMS.Client.ViewModels.Documents
@inject IWarehouseService warehouseService
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<MudForm Model="@model"
         @ref="@form"
         Validation="@(validator.ValidateValue)"
         ValidationDelay="0" Spacing="4">
    @*         <MudTextField @bind-Value="model.Comment"
    For="@(() => model.Comment)"
    Immediate="true"
    Label="Uwagi" /> *@

    <MudSelect T="string"
               @bind-Value="model.IssueWarehouseId"
               Label="Magazyn wydający"
               AnchorOrigin="Origin.BottomCenter"
               For="@(() => model.IssueWarehouseId)"
               Immediate="true">
        @foreach (var warehouse in warehouses)
        {
            <MudSelectItem Value="@warehouse.WarehouseId">
                [@warehouse.WarehouseId] @warehouse.WarehouseName
            </MudSelectItem>
        }
    </MudSelect>

    <MudDatePicker Label="Data wydania dokumentu"
                   @bind-Date="model.DocumentIssueDate"
                   For="@(() => model.DocumentIssueDate)" />

    <MudTextField T="string"
                  @bind-Value="model.Comment"
                  For="@(() => model.Comment)"
                  Immediate="true"
                  Label="Uwagi"
                  Lines="3" />

    <MudTextField @bind-Value="model.AssignedEmployeeId"
                  For="@(() => model.AssignedEmployeeId)"
                  Label="Przypisany pracownik"
                  Disabled />

    <MudDatePicker Label="Data przyjęcia"
                   @bind-Date="model.GoodsReceiptDate"
                   For="@(() => model.GoodsReceiptDate)" />

    <MudSelect T="string"
               @bind-Value="model.SupplierContractorId"
               Label="Dostawca"
               AnchorOrigin="Origin.BottomCenter"
               For="@(() => model.SupplierContractorId)">
        @*         @foreach (var warehouse in warehouses)
        {
        <MudSelectItem Value="@warehouse.WarehouseId">
        [@warehouse.WarehouseId] @warehouse.WarehouseName
        </MudSelectItem>
        } *@
        <MudSelectItem Value="@(new string("Test1"))">
            Test1
        </MudSelectItem>
    </MudSelect>


    <MudButton @onclick="OpenDialogAsync" Variant="Variant.Filled" Color="Color.Primary">
        Dodaj pozycję
    </MudButton>

    <MudDataGrid T="DocumentItemVM" Items="@model.DocumentItems" EditMode="DataGridEditMode.Cell">
        <Columns>
            <PropertyColumn Property="x => x.ProductId" />
            <PropertyColumn Property="x => x.ProductCode" />
            <PropertyColumn Property="x => x.ProductName" />
            <PropertyColumn Property="x => x.Quantity" />
            <TemplateColumn CellClass="d-flex justify-end">
                <CellTemplate Context="item">
                    <MudStack Row>
                        <MudIconButton Size="@Size.Small"
                                       Icon="@Icons.Material.Outlined.Delete"
                                       OnClick="@(() => { model.DocumentItems.Remove(item.Item); StateHasChanged(); })" />
                    </MudStack>
                </CellTemplate>
            </TemplateColumn>
        </Columns>
    </MudDataGrid>

</MudForm>

@* @if (responseErrors.Any())
{
    <MudItem xs="12" sm="5">
        <MudPaper Class="pa-4 mud-height-full">
            <MudText Typo="Typo.subtitle2">@($"Errors ({responseErrors.Count})")</MudText>
            @foreach (var error in responseErrors)
            {
                <MudText Color="@Color.Error">@error</MudText>
            }
        </MudPaper>
    </MudItem>
} *@

@code {
    private CreatePzVM model = new();
    private MudForm form;
    private CreatePzVMValidator validator = new();
    private List<WarehouseVM> warehouses = new();

    protected override async Task OnInitializedAsync()
    {
        var res = await warehouseService.GetWarehouse(new SieveModelVM(1, 500, "", ""));
        warehouses = res.Items.ToList();
    }

    private Task OpenDialogAsync()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, MaxWidth = MaxWidth.Medium };
        var parameters = new DialogParameters<AddPzItemDialogForm>
        {
            { x => x.DocumentItemVMs, model.DocumentItems },
            { x => x.FuncsOnAdded, new List<EventCallback>() { EventCallback.Factory.Create(this, StateHasChanged) } }
        };
        return DialogService.ShowAsync<AddPzItemDialogForm>(null, parameters, options);
    }
}
