@page "/warehousestock"
@using esWMS.Client.Components.TableColumnsFilters
@using esWMS.Client.Services
@using esWMS.Client.ViewModels;
@using esWMS.Client.ViewModels.WarehouseEnvironment.Warehouse
@rendermode InteractiveAuto
@inject IDataService<WarehouseStockVM> warehouseUnitService
@inject IDataService<WarehouseVM> warehouseService

<MudTable T="WarehouseStockVM"
          ServerData="ServerReload"
          Dense="true"
          Hover="true"
          @ref="table"
          RowClass="cursor-pointer"
          OnRowClick="RowClickEvent">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Stany magazynowe</MudText>
        <MudSelect T="string"
                   Class="ps-5"
                   @bind-Value="warehouseId"
                   SelectedValuesChanged="OnSearch"
                   Label="Magazyn"
                   AnchorOrigin="Origin.BottomCenter"
                   Immediate="true"
                   Disabled="@(WarehouseId != null)">
            @foreach (var warehouse in warehouses)
            {
                <MudSelectItem Value="@warehouse.WarehouseId">
                    @if (warehouse.WarehouseId == " ")
                    {
                        <span>
                            @warehouse.WarehouseName
                        </span>
                    }
                    else
                    {
                        <span>
                            [@warehouse.WarehouseId] @warehouse.WarehouseName
                        </span>
                    }
                </MudSelectItem>
            }
        </MudSelect>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.Refresh"
                       OnClick="OnSearch" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>
            <MudTableSortLabel SortLabel="ProductId" T="WarehouseStockVM">
                Id artykułu
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="ProductId" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="ProductName" T="WarehouseStockVM">
                Nazwa artykułu
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="ProductName" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="CategoryName" T="WarehouseStockVM">
                Kategoria
            </MudTableSortLabel>
            <DefaultColumntFilter SearchOptions="searchOptions" Column="CategoryName" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Quantity" T="WarehouseStockVM">
                Ilość
            </MudTableSortLabel>
            <DefaultColumntFilter TypeOfField="DefaultColumntFilter.TypeOfFIlterField.Numeric" SearchOptions="searchOptions" Column="Quantity" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="BlockedQuantity" T="WarehouseStockVM">
                Zablokowane
            </MudTableSortLabel>
            <DefaultColumntFilter TypeOfField="DefaultColumntFilter.TypeOfFIlterField.Numeric" SearchOptions="searchOptions" Column="BlockedQuantity" OnChangedAction="OnSearch" />
        </MudTh>
        <MudTh>
            <MudTableSortLabel SortLabel="Available" T="WarehouseStockVM">
                Dostępne
            </MudTableSortLabel>
            <DefaultColumntFilter TypeOfField="DefaultColumntFilter.TypeOfFIlterField.Numeric" SearchOptions="searchOptions" Column="Available" OnChangedAction="OnSearch" />
        </MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Id artykułu">@context.ProductId</MudTd>
        <MudTd DataLabel="Nazwa artykułu">@context.ProductName</MudTd>
        <MudTd DataLabel="Kategoria">@context.CategoryName</MudTd>
        <MudTd DataLabel="Ilość">@context.Quantity</MudTd>
        <MudTd DataLabel="Zablokowane">@context.BlockedQuantity</MudTd>
        <MudTd DataLabel="Dostępne">@(context.Quantity - context.BlockedQuantity)</MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <TableNoRecordsContent />
    </NoRecordsContent>
    <LoadingContent>
        <TableLoadingContent />
    </LoadingContent>
    <PagerContent>
        <TablePager PageSize="@PageSize" />
    </PagerContent>
</MudTable>

@code {
    [Parameter]
    public EventCallback<WarehouseStockVM> SelectedStock { get; set; }
    [Parameter]
    public string? WarehouseId { get; set; }
    [Parameter]
    public int[]? PageSize { get; set; } = new int[] { 5, 10, 25 };

    private IEnumerable<WarehouseStockVM> Products = [];

    private IEnumerable<WarehouseStockVM> pagedData;
    private MudTable<WarehouseStockVM> table;

    private int totalItems;
    private List<WarehouseVM> warehouses = new() { new() { WarehouseId = " ", WarehouseName = "Wszystkie" } };
    private string warehouseId = " ";

    private Dictionary<string, FilterOption> searchOptions = new()
    {
         { "ProductId", new("ProductId") },
         { "ProductName", new("ProductName") },
         { "CategoryName", new("CategoryName") },
         { "Quantity", new("Quantity", ">") },
         { "BlockedQuantity", new("BlockedQuantity", ">") },
         { "Available", new("Available", ">") }
    };

    protected override async Task OnInitializedAsync()
    {
        if (WarehouseId != null)
        {
            warehouseId = WarehouseId;
        }

        var warehouseResponse = await warehouseService
            .GetPagedResult(@"api/v1/Warehouse/get-filtered", new SieveModelVM(1, 500));
        warehouses.AddRange(warehouseResponse.Items.ToList());

        StateHasChanged();
    }

    private async Task<TableData<WarehouseStockVM>> ServerReload(TableState state, CancellationToken token)
    {
        var sm = new SieveModelVM();

        sm.Page = state.Page + 1;
        sm.PageSize = state.PageSize;

        sm.Sorts = string
            .Concat(state.SortDirection == SortDirection.Descending ? '-' : string.Empty, state.SortLabel ?? string.Empty);

        foreach (var searchOption in searchOptions)
        {
            if (searchOption.Value.Value != string.Empty)
                sm.Filters += searchOption.Value.Column + searchOption.Value.Operator + searchOption.Value.Value + ',';
        }

        var response = await warehouseUnitService
            .GetPagedResult(@"api/v1/Warehouse/get-filtered-stocks", sm, new() { { "WarehouseId", warehouseId } });

        return new TableData<WarehouseStockVM>() { TotalItems = response.TotalItems, Items = response.Items };
    }

    private void OnSearch()
    {
        table.ReloadServerData();
    }

    private async Task RowClickEvent(TableRowClickEventArgs<WarehouseStockVM> tableRowClickEventArgs)
    {
        await SelectedStock.InvokeAsync(tableRowClickEventArgs.Item);
    }
}